{
  "address": "0xDA84179917d8C482b407295793D28FA38086338c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILimitOrderProtocol",
          "name": "_limitOrderProtocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "OrderBroadcasted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILimitOrderProtocol.Order",
          "name": "_order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "broadcastOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitOrderProtocol",
      "outputs": [
        {
          "internalType": "contract ILimitOrderProtocol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderHash",
          "type": "bytes32"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILimitOrderProtocol.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "signatures",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1b133b57a4cf30904836f7bb423ea8d3368983bde7b18d0ac10c9f99ec6e353",
  "receipt": {
    "to": null,
    "from": "0x4C828d2A58B747De3598C2Ce18a0908b0e78dC3e",
    "contractAddress": "0xDA84179917d8C482b407295793D28FA38086338c",
    "transactionIndex": 0,
    "gasUsed": "1365337",
    "logsBloom": "0x
    "blockHash": "0xb03353c775faffff47682391971b00a39d22e9ace73b8eb9e831eac5537b954e",
    "transactionHash": "0xe1b133b57a4cf30904836f7bb423ea8d3368983bde7b18d0ac10c9f99ec6e353",
    "logs": [],
    "blockNumber": 10057772,
    "cumulativeGasUsed": "1365337",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5e892Fdf65D40CffED1367c1116c777A40781A02"
  ],
  "numDeployments": 1,
  "solcInputHash": "a5f9f6c084db56ebd9c1238baa46506a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILimitOrderProtocol\",\"name\":\"_limitOrderProtocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderBroadcasted\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct ILimitOrderProtocol.Order\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"broadcastOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitOrderProtocol\",\"outputs\":[{\"internalType\":\"contract ILimitOrderProtocol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderHash\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct ILimitOrderProtocol.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"broadcastOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes)\":{\"params\":{\"_order\":\"The order to broadcast\",\"_signature\":\"The order's signature. Should be signed by _order.maker\"}},\"orders(bytes32)\":{\"params\":{\"_orderHash\":\"An order's hash to fetch the underlying order\"},\"returns\":{\"order\":\"The order that corresponds to the _orderHash\"}}},\"title\":\"Public order book for Order\",\"version\":1},\"userdoc\":{\"events\":{\"OrderBroadcasted(address,bytes32)\":{\"notice\":\"Emitted every time an order is broadcasted\"}},\"kind\":\"user\",\"methods\":{\"broadcastOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes)\":{\"notice\":\"Broadcast a limit order with its signature\"},\"limitOrderProtocol()\":{\"notice\":\"The limit order protocol this orderbook references\"},\"orders(bytes32)\":{\"notice\":\"Get a broadcasted order\"},\"signatures(bytes32)\":{\"notice\":\"Mapping from order hash to an Order's signature\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrderBook.sol\":\"OrderBook\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"contracts/OrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\ninterface ILimitOrderProtocol {\\n    // Imported from OrderMixin\\n    struct Order {\\n        uint256 salt;\\n        address makerAsset;\\n        address takerAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n        bytes makerAssetData;\\n        bytes takerAssetData;\\n        bytes getMakerAmount; // this.staticcall(abi.encodePacked(bytes, swapTakerAmount)) => (swapMakerAmount)\\n        bytes getTakerAmount; // this.staticcall(abi.encodePacked(bytes, swapMakerAmount)) => (swapTakerAmount)\\n        bytes predicate;      // this.staticcall(bytes) => (bool)\\n        bytes permit;         // On first fill: permit.1.call(abi.encodePacked(permit.selector, permit.2))\\n        bytes interaction;\\n    }\\n\\n    function hashOrder(Order memory order) external view returns(bytes32);\\n}\\n\\n/// @title Public order book for Order\\n// solhint-disable-next-line max-states-count\\ncontract OrderBook {\\n    /// @notice The limit order protocol this orderbook references\\n    ILimitOrderProtocol public immutable limitOrderProtocol;\\n\\n    /// @notice Mapping from order hash to an Order's signature\\n    mapping(bytes32 => bytes) public signatures;\\n\\n    // Deconstructed mappings for an Order\\n    mapping(bytes32 => uint256) internal _salts;\\n    mapping(bytes32 => address) internal _makerAssets;\\n    mapping(bytes32 => address) internal _takerAssets;\\n    mapping(bytes32 => address) internal _makers;\\n    mapping(bytes32 => address) internal _receivers;\\n    mapping(bytes32 => address) internal _allowedSenders;  \\n    mapping(bytes32 => uint256) internal _makingAmounts;\\n    mapping(bytes32 => uint256) internal _takingAmounts;\\n    mapping(bytes32 => bytes) internal _makerAssetDatas;\\n    mapping(bytes32 => bytes) internal _takerAssetDatas;\\n    mapping(bytes32 => bytes) internal _getMakerAmounts; \\n    mapping(bytes32 => bytes) internal _getTakerAmounts; \\n    mapping(bytes32 => bytes) internal _predicates;      \\n    mapping(bytes32 => bytes) internal _permits;         \\n    mapping(bytes32 => bytes) internal _interactions;\\n\\n    /// @notice Emitted every time an order is broadcasted\\n    event OrderBroadcasted(address indexed maker, bytes32 orderHash);\\n\\n    constructor(ILimitOrderProtocol _limitOrderProtocol) {\\n        limitOrderProtocol = _limitOrderProtocol;\\n    }\\n\\n    /// @notice Broadcast a limit order with its signature\\n    /// @param _order The order to broadcast\\n    /// @param _signature The order's signature. Should be signed by _order.maker\\n    function broadcastOrder(\\n        ILimitOrderProtocol.Order memory _order,\\n        bytes calldata _signature\\n    ) external {\\n        bytes32 orderHash = limitOrderProtocol.hashOrder(_order);\\n        require(SignatureChecker.isValidSignatureNow(_order.maker, orderHash, _signature), \\\"OB: bad signature\\\");\\n\\n        _salts[orderHash] = _order.salt;\\n        _makerAssets[orderHash] = _order.makerAsset;\\n        _takerAssets[orderHash] = _order.takerAsset;\\n        _makers[orderHash] = _order.maker;\\n        _receivers[orderHash] = _order.receiver;\\n        _allowedSenders[orderHash] = _order.allowedSender;\\n        _makingAmounts[orderHash] = _order.makingAmount;\\n        _takingAmounts[orderHash] = _order.takingAmount;\\n        _makerAssetDatas[orderHash] = _order.makerAssetData;\\n        _takerAssetDatas[orderHash] = _order.takerAssetData;\\n        _getMakerAmounts[orderHash] = _order.getMakerAmount;\\n        _getTakerAmounts[orderHash] = _order.getTakerAmount;\\n        _predicates[orderHash] = _order.predicate;\\n        _permits[orderHash] = _order.permit;\\n        _interactions[orderHash] = _order.interaction;\\n\\n        signatures[orderHash] = _signature;\\n        emit OrderBroadcasted(_order.maker, orderHash);\\n    }\\n\\n    /// @notice Get a broadcasted order\\n    /// @param _orderHash An order's hash to fetch the underlying order\\n    /// @return order The order that corresponds to the _orderHash\\n    function orders(\\n        bytes32 _orderHash\\n    ) external view returns(ILimitOrderProtocol.Order memory order) {\\n        order = ILimitOrderProtocol.Order({\\n            salt: _salts[_orderHash],\\n            makerAsset: _makerAssets[_orderHash],\\n            takerAsset: _takerAssets[_orderHash],\\n            maker: _makers[_orderHash],\\n            receiver: _receivers[_orderHash],\\n            allowedSender: _allowedSenders[_orderHash],\\n            makingAmount: _makingAmounts[_orderHash],\\n            takingAmount: _takingAmounts[_orderHash],\\n            makerAssetData: _makerAssetDatas[_orderHash],\\n            takerAssetData: _takerAssetDatas[_orderHash],\\n            getMakerAmount: _getMakerAmounts[_orderHash],\\n            getTakerAmount: _getTakerAmounts[_orderHash],\\n            predicate: _predicates[_orderHash],\\n            permit: _permits[_orderHash],\\n            interaction: _interactions[_orderHash]\\n        });\\n    }\\n}\\n\\n\",\"keccak256\":\"0x7b02ab1920980c77695038dcb7efcbec4e2ee385068a0bd9f6e5a5636a992806\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161185838038061185883398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516117c761009160003960008181609401526101d501526117c76000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632422224e146100515780637bea11b81461007a5780637f94dd331461008f5780639c3f1e90146100db575b600080fd5b61006461005f36600461105a565b6100fb565b60405161007191906110ed565b60405180910390f35b61008d61008836600461126f565b610195565b005b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100ee6100e936600461105a565b610568565b6040516100719190611462565b6000602081905290815260409020805461011490611637565b80601f016020809104026020016040519081016040528092919081815260200182805461014090611637565b801561018d5780601f106101625761010080835404028352916020019161018d565b820191906000526020600020905b81548152906001019060200180831161017057829003601f168201915b505050505081565b6040517ffa1cb9f200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fa1cb9f29061020a908790600401611462565b602060405180830381865afa158015610227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024b919061168b565b905061029284606001518285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b6492505050565b6102fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f423a20626164207369676e6174757265000000000000000000000000000000604482015260640160405180910390fd5b8351600082815260016020908152604080832093909355808701516002825283832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617909155848901516003845285852080548316918416919091179055606089015160048452858520805483169184169190911790556080890151600584528585208054831691841691909117905560a0890151600684528585208054909216921691909117905560c0870151600782528383205560e08701516008825283832055610100870151600982529290912082516103fd9391929190910190610f2f565b506101208401516000828152600a60209081526040909120825161042693919290910190610f2f565b506101408401516000828152600b60209081526040909120825161044f93919290910190610f2f565b506101608401516000828152600c60209081526040909120825161047893919290910190610f2f565b506101808401516000828152600d6020908152604090912082516104a193919290910190610f2f565b506101a08401516000828152600e6020908152604090912082516104ca93919290910190610f2f565b506101c08401516000828152600f6020908152604090912082516104f393919290910190610f2f565b50600081815260208190526040902061050d908484610fb3565b50836060015173ffffffffffffffffffffffffffffffffffffffff167fdf482aa70d52efefab20dbfaf9cc2b0cb880c75e72e26972c9c5d29c2c02f5638260405161055a91815260200190565b60405180910390a250505050565b61064f604051806101e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604080516101e081018252600084815260016020908152838220548352858252600281528382205473ffffffffffffffffffffffffffffffffffffffff90811682850152868352600382528483205481168486015286835260048252848320548116606085015286835260058252848320548116608085015286835260068252848320541660a0840152858252600781528382205460c0840152858252600881528382205460e0840152858252600990529190912080546101008301919061071690611637565b80601f016020809104026020016040519081016040528092919081815260200182805461074290611637565b801561078f5780601f106107645761010080835404028352916020019161078f565b820191906000526020600020905b81548152906001019060200180831161077257829003601f168201915b50505050508152602001600a600085815260200190815260200160002080546107b790611637565b80601f01602080910402602001604051908101604052809291908181526020018280546107e390611637565b80156108305780601f1061080557610100808354040283529160200191610830565b820191906000526020600020905b81548152906001019060200180831161081357829003601f168201915b50505050508152602001600b6000858152602001908152602001600020805461085890611637565b80601f016020809104026020016040519081016040528092919081815260200182805461088490611637565b80156108d15780601f106108a6576101008083540402835291602001916108d1565b820191906000526020600020905b8154815290600101906020018083116108b457829003601f168201915b50505050508152602001600c600085815260200190815260200160002080546108f990611637565b80601f016020809104026020016040519081016040528092919081815260200182805461092590611637565b80156109725780601f1061094757610100808354040283529160200191610972565b820191906000526020600020905b81548152906001019060200180831161095557829003601f168201915b50505050508152602001600d6000858152602001908152602001600020805461099a90611637565b80601f01602080910402602001604051908101604052809291908181526020018280546109c690611637565b8015610a135780601f106109e857610100808354040283529160200191610a13565b820191906000526020600020905b8154815290600101906020018083116109f657829003601f168201915b50505050508152602001600e60008581526020019081526020016000208054610a3b90611637565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6790611637565b8015610ab45780601f10610a8957610100808354040283529160200191610ab4565b820191906000526020600020905b815481529060010190602001808311610a9757829003601f168201915b50505050508152602001600f60008581526020019081526020016000208054610adc90611637565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0890611637565b8015610b555780601f10610b2a57610100808354040283529160200191610b55565b820191906000526020600020905b815481529060010190602001808311610b3857829003601f168201915b50505050508152509050919050565b6000806000610b738585610d55565b90925090506000816004811115610b8c57610b8c6116a4565b148015610bc457508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15610bd457600192505050610d4e565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8888604051602401610c099291906116d3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610c9291906116f4565b600060405180830381855afa9150503d8060008114610ccd576040519150601f19603f3d011682016040523d82523d6000602084013e610cd2565b606091505b5091509150818015610ce5575080516020145b8015610d47575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090610d239083016020908101908401611710565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b9450505050505b9392505050565b600080825160411415610d8c5760208301516040840151606085015160001a610d8087828585610dc5565b94509450505050610dbe565b825160401415610db65760208301516040840151610dab868383610edd565b935093505050610dbe565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610dfc5750600090506003610ed4565b8460ff16601b14158015610e1457508460ff16601c14155b15610e255750600090506004610ed4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610e79573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610ecd57600060019250925050610ed4565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681610f1360ff86901c601b611752565b9050610f2187828885610dc5565b935093505050935093915050565b828054610f3b90611637565b90600052602060002090601f016020900481019282610f5d5760008555610fa3565b82601f10610f7657805160ff1916838001178555610fa3565b82800160010185558215610fa3579182015b82811115610fa3578251825591602001919060010190610f88565b50610faf929150611045565b5090565b828054610fbf90611637565b90600052602060002090601f016020900481019282610fe15760008555610fa3565b82601f10611018578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610fa3565b82800160010185558215610fa3579182015b82811115610fa357823582559160200191906001019061102a565b5b80821115610faf5760008155600101611046565b60006020828403121561106c57600080fd5b5035919050565b60005b8381101561108e578181015183820152602001611076565b8381111561109d576000848401525b50505050565b600081518084526110bb816020860160208601611073565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610d4e60208301846110a3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171561115357611153611100565b60405290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461117d57600080fd5b919050565b600082601f83011261119357600080fd5b813567ffffffffffffffff808211156111ae576111ae611100565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156111f4576111f4611100565b8160405283815286602085880101111561120d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f84011261123f57600080fd5b50813567ffffffffffffffff81111561125757600080fd5b602083019150836020828501011115610dbe57600080fd5b60008060006040848603121561128457600080fd5b833567ffffffffffffffff8082111561129c57600080fd5b908501906101e082880312156112b157600080fd5b6112b961112f565b823581526112c960208401611159565b60208201526112da60408401611159565b60408201526112eb60608401611159565b60608201526112fc60808401611159565b608082015261130d60a08401611159565b60a082015260c083013560c082015260e083013560e0820152610100808401358381111561133a57600080fd5b6113468a828701611182565b828401525050610120808401358381111561136057600080fd5b61136c8a828701611182565b828401525050610140808401358381111561138657600080fd5b6113928a828701611182565b82840152505061016080840135838111156113ac57600080fd5b6113b88a828701611182565b82840152505061018080840135838111156113d257600080fd5b6113de8a828701611182565b8284015250506101a080840135838111156113f857600080fd5b6114048a828701611182565b8284015250506101c0808401358381111561141e57600080fd5b61142a8a828701611182565b82840152505080955050602086013591508082111561144857600080fd5b506114558682870161122d565b9497909650939450505050565b602081528151602082015260006020830151611496604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff8116606084015250606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015160e083015260e08301516101008181850152808501519150506101e061012081818601526115566102008601846110a3565b92508086015190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061014081878603018188015261159585846110a3565b9450808801519250506101608187860301818801526115b485846110a3565b9450808801519250506101808187860301818801526115d385846110a3565b9450808801519250506101a08187860301818801526115f285846110a3565b9450808801519250506101c081878603018188015261161185846110a3565b90880151878203909201848801529350905061162d83826110a3565b9695505050505050565b600181811c9082168061164b57607f821691505b60208210811415611685577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020828403121561169d57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8281526040602082015260006116ec60408301846110a3565b949350505050565b60008251611706818460208701611073565b9190910192915050565b60006020828403121561172257600080fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114610d4e57600080fd5b6000821982111561178c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220ae42881558d5190c64b72426cc2bb596f8846f9abcdba93865c639e3cf382da464736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632422224e146100515780637bea11b81461007a5780637f94dd331461008f5780639c3f1e90146100db575b600080fd5b61006461005f36600461105a565b6100fb565b60405161007191906110ed565b60405180910390f35b61008d61008836600461126f565b610195565b005b6100b67f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610071565b6100ee6100e936600461105a565b610568565b6040516100719190611462565b6000602081905290815260409020805461011490611637565b80601f016020809104026020016040519081016040528092919081815260200182805461014090611637565b801561018d5780601f106101625761010080835404028352916020019161018d565b820191906000526020600020905b81548152906001019060200180831161017057829003601f168201915b505050505081565b6040517ffa1cb9f200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fa1cb9f29061020a908790600401611462565b602060405180830381865afa158015610227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024b919061168b565b905061029284606001518285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b6492505050565b6102fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f423a20626164207369676e6174757265000000000000000000000000000000604482015260640160405180910390fd5b8351600082815260016020908152604080832093909355808701516002825283832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617909155848901516003845285852080548316918416919091179055606089015160048452858520805483169184169190911790556080890151600584528585208054831691841691909117905560a0890151600684528585208054909216921691909117905560c0870151600782528383205560e08701516008825283832055610100870151600982529290912082516103fd9391929190910190610f2f565b506101208401516000828152600a60209081526040909120825161042693919290910190610f2f565b506101408401516000828152600b60209081526040909120825161044f93919290910190610f2f565b506101608401516000828152600c60209081526040909120825161047893919290910190610f2f565b506101808401516000828152600d6020908152604090912082516104a193919290910190610f2f565b506101a08401516000828152600e6020908152604090912082516104ca93919290910190610f2f565b506101c08401516000828152600f6020908152604090912082516104f393919290910190610f2f565b50600081815260208190526040902061050d908484610fb3565b50836060015173ffffffffffffffffffffffffffffffffffffffff167fdf482aa70d52efefab20dbfaf9cc2b0cb880c75e72e26972c9c5d29c2c02f5638260405161055a91815260200190565b60405180910390a250505050565b61064f604051806101e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604080516101e081018252600084815260016020908152838220548352858252600281528382205473ffffffffffffffffffffffffffffffffffffffff90811682850152868352600382528483205481168486015286835260048252848320548116606085015286835260058252848320548116608085015286835260068252848320541660a0840152858252600781528382205460c0840152858252600881528382205460e0840152858252600990529190912080546101008301919061071690611637565b80601f016020809104026020016040519081016040528092919081815260200182805461074290611637565b801561078f5780601f106107645761010080835404028352916020019161078f565b820191906000526020600020905b81548152906001019060200180831161077257829003601f168201915b50505050508152602001600a600085815260200190815260200160002080546107b790611637565b80601f01602080910402602001604051908101604052809291908181526020018280546107e390611637565b80156108305780601f1061080557610100808354040283529160200191610830565b820191906000526020600020905b81548152906001019060200180831161081357829003601f168201915b50505050508152602001600b6000858152602001908152602001600020805461085890611637565b80601f016020809104026020016040519081016040528092919081815260200182805461088490611637565b80156108d15780601f106108a6576101008083540402835291602001916108d1565b820191906000526020600020905b8154815290600101906020018083116108b457829003601f168201915b50505050508152602001600c600085815260200190815260200160002080546108f990611637565b80601f016020809104026020016040519081016040528092919081815260200182805461092590611637565b80156109725780601f1061094757610100808354040283529160200191610972565b820191906000526020600020905b81548152906001019060200180831161095557829003601f168201915b50505050508152602001600d6000858152602001908152602001600020805461099a90611637565b80601f01602080910402602001604051908101604052809291908181526020018280546109c690611637565b8015610a135780601f106109e857610100808354040283529160200191610a13565b820191906000526020600020905b8154815290600101906020018083116109f657829003601f168201915b50505050508152602001600e60008581526020019081526020016000208054610a3b90611637565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6790611637565b8015610ab45780601f10610a8957610100808354040283529160200191610ab4565b820191906000526020600020905b815481529060010190602001808311610a9757829003601f168201915b50505050508152602001600f60008581526020019081526020016000208054610adc90611637565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0890611637565b8015610b555780601f10610b2a57610100808354040283529160200191610b55565b820191906000526020600020905b815481529060010190602001808311610b3857829003601f168201915b50505050508152509050919050565b6000806000610b738585610d55565b90925090506000816004811115610b8c57610b8c6116a4565b148015610bc457508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15610bd457600192505050610d4e565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8888604051602401610c099291906116d3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610c9291906116f4565b600060405180830381855afa9150503d8060008114610ccd576040519150601f19603f3d011682016040523d82523d6000602084013e610cd2565b606091505b5091509150818015610ce5575080516020145b8015610d47575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090610d239083016020908101908401611710565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b9450505050505b9392505050565b600080825160411415610d8c5760208301516040840151606085015160001a610d8087828585610dc5565b94509450505050610dbe565b825160401415610db65760208301516040840151610dab868383610edd565b935093505050610dbe565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610dfc5750600090506003610ed4565b8460ff16601b14158015610e1457508460ff16601c14155b15610e255750600090506004610ed4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610e79573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610ecd57600060019250925050610ed4565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681610f1360ff86901c601b611752565b9050610f2187828885610dc5565b935093505050935093915050565b828054610f3b90611637565b90600052602060002090601f016020900481019282610f5d5760008555610fa3565b82601f10610f7657805160ff1916838001178555610fa3565b82800160010185558215610fa3579182015b82811115610fa3578251825591602001919060010190610f88565b50610faf929150611045565b5090565b828054610fbf90611637565b90600052602060002090601f016020900481019282610fe15760008555610fa3565b82601f10611018578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555610fa3565b82800160010185558215610fa3579182015b82811115610fa357823582559160200191906001019061102a565b5b80821115610faf5760008155600101611046565b60006020828403121561106c57600080fd5b5035919050565b60005b8381101561108e578181015183820152602001611076565b8381111561109d576000848401525b50505050565b600081518084526110bb816020860160208601611073565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610d4e60208301846110a3565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff8111828210171561115357611153611100565b60405290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461117d57600080fd5b919050565b600082601f83011261119357600080fd5b813567ffffffffffffffff808211156111ae576111ae611100565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156111f4576111f4611100565b8160405283815286602085880101111561120d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f84011261123f57600080fd5b50813567ffffffffffffffff81111561125757600080fd5b602083019150836020828501011115610dbe57600080fd5b60008060006040848603121561128457600080fd5b833567ffffffffffffffff8082111561129c57600080fd5b908501906101e082880312156112b157600080fd5b6112b961112f565b823581526112c960208401611159565b60208201526112da60408401611159565b60408201526112eb60608401611159565b60608201526112fc60808401611159565b608082015261130d60a08401611159565b60a082015260c083013560c082015260e083013560e0820152610100808401358381111561133a57600080fd5b6113468a828701611182565b828401525050610120808401358381111561136057600080fd5b61136c8a828701611182565b828401525050610140808401358381111561138657600080fd5b6113928a828701611182565b82840152505061016080840135838111156113ac57600080fd5b6113b88a828701611182565b82840152505061018080840135838111156113d257600080fd5b6113de8a828701611182565b8284015250506101a080840135838111156113f857600080fd5b6114048a828701611182565b8284015250506101c0808401358381111561141e57600080fd5b61142a8a828701611182565b82840152505080955050602086013591508082111561144857600080fd5b506114558682870161122d565b9497909650939450505050565b602081528151602082015260006020830151611496604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff8116606084015250606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015160e083015260e08301516101008181850152808501519150506101e061012081818601526115566102008601846110a3565b92508086015190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061014081878603018188015261159585846110a3565b9450808801519250506101608187860301818801526115b485846110a3565b9450808801519250506101808187860301818801526115d385846110a3565b9450808801519250506101a08187860301818801526115f285846110a3565b9450808801519250506101c081878603018188015261161185846110a3565b90880151878203909201848801529350905061162d83826110a3565b9695505050505050565b600181811c9082168061164b57607f821691505b60208210811415611685577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60006020828403121561169d57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8281526040602082015260006116ec60408301846110a3565b949350505050565b60008251611706818460208701611073565b9190910192915050565b60006020828403121561172257600080fd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114610d4e57600080fd5b6000821982111561178c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220ae42881558d5190c64b72426cc2bb596f8846f9abcdba93865c639e3cf382da464736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "broadcastOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes)": {
        "params": {
          "_order": "The order to broadcast",
          "_signature": "The order's signature. Should be signed by _order.maker"
        }
      },
      "orders(bytes32)": {
        "params": {
          "_orderHash": "An order's hash to fetch the underlying order"
        },
        "returns": {
          "order": "The order that corresponds to the _orderHash"
        }
      }
    },
    "title": "Public order book for Order",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OrderBroadcasted(address,bytes32)": {
        "notice": "Emitted every time an order is broadcasted"
      }
    },
    "kind": "user",
    "methods": {
      "broadcastOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes)": {
        "notice": "Broadcast a limit order with its signature"
      },
      "limitOrderProtocol()": {
        "notice": "The limit order protocol this orderbook references"
      },
      "orders(bytes32)": {
        "notice": "Get a broadcasted order"
      },
      "signatures(bytes32)": {
        "notice": "Mapping from order hash to an Order's signature"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3296,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "signatures",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3300,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_salts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3304,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_makerAssets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3308,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_takerAssets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3312,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_makers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3316,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_receivers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3320,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_allowedSenders",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3324,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_makingAmounts",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3328,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_takingAmounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3332,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_makerAssetDatas",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3336,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_takerAssetDatas",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3340,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_getMakerAmounts",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3344,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_getTakerAmounts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3348,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_predicates",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3352,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_permits",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3356,
        "contract": "contracts/OrderBook.sol:OrderBook",
        "label": "_interactions",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}