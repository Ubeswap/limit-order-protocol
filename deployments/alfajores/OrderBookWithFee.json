{
  "address": "0xab8e14e21fdd68b1f960446d97a33e42a8147cf4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract LimitOrderProtocol",
          "name": "_limitOrderProtocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "OrderBroadcasted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "_order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "broadcastOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitOrderProtocol",
      "outputs": [
        {
          "internalType": "contract LimitOrderProtocol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6d6056606fab2990391f97c9f76887244c61ae080ac43f1c153fffca3eec8e5",
  "receipt": {
    "to": null,
    "from": "0x4c828d2a58b747de3598c2ce18a0908b0e78dc3e",
    "contractAddress": "0xab8e14e21fdd68b1f960446d97a33e42a8147cf4",
    "transactionIndex": "0x0",
    "gasUsed": "0x10c8fb",
    "logsBloom": "0x
    "blockHash": "0x8ec290330dd915e19d562ff374317ea49acbe7a37c42efd01f4ac0694075eccd",
    "transactionHash": "0xd6d6056606fab2990391f97c9f76887244c61ae080ac43f1c153fffca3eec8e5",
    "logs": [],
    "blockNumber": "0x9ce908",
    "cumulativeGasUsed": "0x10c8fb",
    "status": "0x1"
  },
  "args": [
    "0x2984ADdB8479D26360150Cf1dFb43D44534b43e2"
  ],
  "numDeployments": 2,
  "solcInputHash": "7a68c96bbcd8cb7879be0d85aceb0f91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract LimitOrderProtocol\",\"name\":\"_limitOrderProtocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"OrderBroadcasted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"broadcastOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitOrderProtocol\",\"outputs\":[{\"internalType\":\"contract LimitOrderProtocol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Public order book with fees\",\"version\":1},\"userdoc\":{\"events\":{\"OrderBroadcasted(address,bytes32,(uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes)\":{\"notice\":\"Emitted every time an order is broadcasted\"}},\"kind\":\"user\",\"methods\":{\"FEE_DENOMINATOR()\":{\"notice\":\"Denominator for the fee\"},\"limitOrderProtocol()\":{\"notice\":\"The limit order protocol this orderbook references\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrderBookWithFee.sol\":\"OrderBookWithFee\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/LimitOrderProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"./OrderMixin.sol\\\";\\nimport \\\"./OrderRFQMixin.sol\\\";\\n\\n/// @title Ubeswap Limit Order Protocol v2\\ncontract LimitOrderProtocol is\\n    EIP712(\\\"Ubeswap Limit Order Protocol\\\", \\\"2\\\"),\\n    OrderMixin,\\n    OrderRFQMixin\\n{\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns(bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xfa5a18fef29b7989d14a12bed26c45e5418954cf7041cc1cafbe3b10292fb26a\",\"license\":\"MIT\"},\"contracts/OrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\nimport \\\"./LimitOrderProtocol.sol\\\";\\n\\n/// @title Internal base OrderBook\\nabstract contract OrderBook {\\n    /// @notice The limit order protocol this orderbook references\\n    LimitOrderProtocol public immutable limitOrderProtocol;\\n\\n    /// @notice Emitted every time an order is broadcasted\\n    event OrderBroadcasted(\\n        address indexed maker,\\n        bytes32 indexed orderHash,\\n        LimitOrderProtocol.Order order,\\n        bytes signature\\n    );\\n\\n    constructor(LimitOrderProtocol _limitOrderProtocol) {\\n        limitOrderProtocol = _limitOrderProtocol;\\n    }\\n\\n    /// @notice Broadcast a limit order with its signature\\n    /// @param _order The order to broadcast\\n    /// @param _signature The order's signature. Should be signed by _order.maker\\n    function _broadcastOrder(\\n        LimitOrderProtocol.Order memory _order,\\n        bytes calldata _signature\\n    ) internal {\\n        bytes32 orderHash = limitOrderProtocol.hashOrder(_order);\\n        require(\\n            SignatureChecker.isValidSignatureNow(\\n                _order.maker,\\n                orderHash,\\n                _signature\\n            ),\\n            \\\"OB: bad signature\\\"\\n        );\\n\\n        emit OrderBroadcasted(_order.maker, orderHash, _order, _signature);\\n    }\\n}\\n\",\"keccak256\":\"0xf07d8f892200e2710cff9ebae28aadb2df2bf28ed6e082c1e4412644f5edf8b2\",\"license\":\"MIT\"},\"contracts/OrderBookWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./OrderBook.sol\\\";\\n\\n/// @title Public order book with fees\\ncontract OrderBookWithFee is OrderBook {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    /// @notice Denominator for the fee\\n    uint256 public constant FEE_DENOMINATOR = 1_000_000;\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(LimitOrderProtocol _limitOrderProtocol) OrderBook(_limitOrderProtocol) {}\\n\\n    function broadcastOrder(\\n        LimitOrderProtocol.Order memory _order,\\n        bytes calldata _signature,\\n        uint256 _fee,\\n        address _feeRecipient\\n    ) external {\\n        require(_feeRecipient != address(0), \\\"OBWF: Invalid fee recipient\\\");\\n        uint256 feeAmount = _order.makingAmount.mul(_fee).div(FEE_DENOMINATOR);\\n        if (feeAmount > 0) {\\n            IERC20(_order.makerAsset).safeTransferFrom(\\n                msg.sender,\\n                _feeRecipient,\\n                feeAmount\\n            );\\n        }\\n        _broadcastOrder(_order, _signature);\\n    }\\n}\\n\",\"keccak256\":\"0xcfa8667c126410ce0dfa745ea3dd7a02e99b2406f22eabd13b537b721ead80f8\",\"license\":\"MIT\"},\"contracts/OrderMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./helpers/AmountCalculator.sol\\\";\\nimport \\\"./helpers/ChainlinkCalculator.sol\\\";\\nimport \\\"./helpers/NonceManager.sol\\\";\\nimport \\\"./helpers/PredicateHelper.sol\\\";\\nimport \\\"./interfaces/InteractiveNotificationReceiver.sol\\\";\\nimport \\\"./libraries/ArgumentsDecoder.sol\\\";\\nimport \\\"./libraries/Permitable.sol\\\";\\n\\n/// @title Regular Limit Order mixin\\nabstract contract OrderMixin is\\n    EIP712,\\n    AmountCalculator,\\n    ChainlinkCalculator,\\n    NonceManager,\\n    PredicateHelper,\\n    Permitable\\n{\\n    using Address for address;\\n    using ArgumentsDecoder for bytes;\\n\\n    /// @notice Emitted every time order gets filled, including partial fills\\n    event OrderFilled(\\n        address indexed maker,\\n        bytes32 orderHash,\\n        uint256 remaining\\n    );\\n\\n    /// @notice Emitted when order gets cancelled\\n    event OrderCanceled(\\n        address indexed maker,\\n        bytes32 orderHash,\\n        uint256 remainingRaw\\n    );\\n\\n    // Fixed-size order part with core information\\n    struct StaticOrder {\\n        uint256 salt;\\n        address makerAsset;\\n        address takerAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n    }\\n\\n    // `StaticOrder` extension including variable-sized additional order meta information\\n    struct Order {\\n        uint256 salt;\\n        address makerAsset;\\n        address takerAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n        bytes makerAssetData;\\n        bytes takerAssetData;\\n        bytes getMakerAmount; // this.staticcall(abi.encodePacked(bytes, swapTakerAmount)) => (swapMakerAmount)\\n        bytes getTakerAmount; // this.staticcall(abi.encodePacked(bytes, swapMakerAmount)) => (swapTakerAmount)\\n        bytes predicate;      // this.staticcall(bytes) => (bool)\\n        bytes permit;         // On first fill: permit.1.call(abi.encodePacked(permit.selector, permit.2))\\n        bytes interaction;\\n    }\\n\\n    // Amounts used when filling an order\\n    struct OrderAmounts {\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n        uint256 thresholdAmount; // Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount\\n    }\\n\\n    bytes32 constant public LIMIT_ORDER_TYPEHASH = keccak256(\\n        \\\"Order(uint256 salt,address makerAsset,address takerAsset,address maker,address receiver,address allowedSender,uint256 makingAmount,uint256 takingAmount,bytes makerAssetData,bytes takerAssetData,bytes getMakerAmount,bytes getTakerAmount,bytes predicate,bytes permit,bytes interaction)\\\"\\n    );\\n    uint256 constant private _ORDER_DOES_NOT_EXIST = 0;\\n    uint256 constant private _ORDER_FILLED = 1;\\n\\n    /// @notice Stores unfilled amounts for each order plus one.\\n    /// Therefore 0 means order doesn't exist and 1 means order was filled\\n    mapping(bytes32 => uint256) private _remaining;\\n\\n    /// @notice Returns unfilled amount for order. Throws if order does not exist\\n    function remaining(bytes32 orderHash) external view returns(uint256) {\\n        uint256 amount = _remaining[orderHash];\\n        require(amount != _ORDER_DOES_NOT_EXIST, \\\"LOP: Unknown order\\\");\\n        unchecked { amount -= 1; }\\n        return amount;\\n    }\\n\\n    /// @notice Returns unfilled amount for order\\n    /// @return Result Unfilled amount of order plus one if order exists. Otherwise 0\\n    function remainingRaw(bytes32 orderHash) external view returns(uint256) {\\n        return _remaining[orderHash];\\n    }\\n\\n    /// @notice Same as `remainingRaw` but for multiple orders\\n    function remainingsRaw(bytes32[] memory orderHashes) external view returns(uint256[] memory) {\\n        uint256[] memory results = new uint256[](orderHashes.length);\\n        for (uint256 i = 0; i < orderHashes.length; i++) {\\n            results[i] = _remaining[orderHashes[i]];\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Calls every target with corresponding data. Then reverts with CALL_RESULTS_0101011 where zeroes and ones\\n     * denote failure or success of the corresponding call\\n     * @param targets Array of addresses that will be called\\n     * @param data Array of data that will be passed to each call\\n     */\\n    function simulateCalls(address[] calldata targets, bytes[] calldata data) external {\\n        require(targets.length == data.length, \\\"LOP: array size mismatch\\\");\\n        bytes memory reason = new bytes(targets.length);\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory result) = targets[i].call(data[i]);\\n            if (success && result.length > 0) {\\n                success = result.length == 32 && result.decodeBool();\\n            }\\n            reason[i] = success ? bytes1(\\\"1\\\") : bytes1(\\\"0\\\");\\n        }\\n\\n        // Always revert and provide per call results\\n        revert(string(abi.encodePacked(\\\"CALL_RESULTS_\\\", reason)));\\n    }\\n\\n    /// @notice Cancels order by setting remaining amount to zero\\n    function cancelOrder(Order memory order) external {\\n        require(order.maker == msg.sender, \\\"LOP: Access denied\\\");\\n\\n        bytes32 orderHash = hashOrder(order);\\n        uint256 orderRemaining = _remaining[orderHash];\\n        require(orderRemaining != _ORDER_FILLED, \\\"LOP: already filled\\\");\\n        emit OrderCanceled(msg.sender, orderHash, orderRemaining);\\n        _remaining[orderHash] = _ORDER_FILLED;\\n    }\\n\\n    /// @notice Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param orderAmounts Amounts to fill\\n    function fillOrder(\\n        Order memory order,\\n        bytes calldata signature,\\n        OrderAmounts calldata orderAmounts\\n    ) external returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\\n        return _fillOrderTo(order, signature, orderAmounts, msg.sender, new bytes(0));\\n    }\\n\\n    /// @notice Same as `fillOrder` but calls permit first,\\n    /// allowing to approve token spending and make a swap in one transaction.\\n    /// Also allows to specify funds destination instead of `msg.sender`\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param orderAmounts Amounts to fill\\n    /// @param target Address that will receive swap funds\\n    /// @param permit Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.\\n    /// @dev See tests for examples\\n    function fillOrderToWithPermit(\\n        Order memory order,\\n        bytes calldata signature,\\n        OrderAmounts calldata orderAmounts,\\n        address target,\\n        bytes calldata permit\\n    ) external returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\\n        require(permit.length >= 20, \\\"LOP: permit length too low\\\");\\n        (address token, bytes calldata permitData) = permit.decodeTargetAndData();\\n        _permit(token, permitData);\\n        return _fillOrderTo(order, signature, orderAmounts, target, new bytes(0));\\n    }\\n\\n    /// @notice Same as `fillOrder` but allows to specify funds destination instead of `msg.sender`\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param orderAmounts Amounts to fill\\n    /// @param target Address that will receive swap funds\\n    function fillOrderTo(\\n        Order memory order,\\n        bytes calldata signature,\\n        OrderAmounts calldata orderAmounts,\\n        address target\\n    ) public returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\\n        return _fillOrderTo(\\n            order,\\n            signature,\\n            orderAmounts,\\n            target,\\n            new bytes(0)\\n        );\\n    }\\n\\n    /// @notice Same as `fillOrderTo` but allows for additional interaction between asset transfers\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param orderAmounts Amounts to fill\\n    /// @param target Address that will receive swap funds\\n    /// @param extraInteraction Optional interaction. If present, is triggered between asset transfers\\n    function fillOrderToWithExtraInteraction(\\n        Order memory order,\\n        bytes calldata signature,\\n        OrderAmounts calldata orderAmounts,\\n        address target,\\n        bytes calldata extraInteraction\\n    ) public returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\\n        return _fillOrderTo(\\n            order,\\n            signature,\\n            orderAmounts,\\n            target,\\n            extraInteraction\\n        );\\n    }\\n\\n    /// @notice Base implementation for order filling\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param orderAmounts Amounts to fill\\n    /// @param target Address that will receive swap funds\\n    /// @param extraInteraction Optional interaction. If present, is triggered between asset transfers\\n    function _fillOrderTo(\\n        Order memory order,\\n        bytes calldata signature,\\n        OrderAmounts memory orderAmounts,\\n        address target,\\n        bytes memory extraInteraction\\n    ) internal returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\\n        require(target != address(0), \\\"LOP: zero target is forbidden\\\");\\n        bytes32 orderHash = hashOrder(order);\\n\\n        {  // Stack too deep\\n            uint256 remainingMakerAmount = _remaining[orderHash];\\n            require(remainingMakerAmount != _ORDER_FILLED, \\\"LOP: remaining amount is 0\\\");\\n            require(order.allowedSender == address(0) || order.allowedSender == msg.sender, \\\"LOP: private order\\\");\\n            if (remainingMakerAmount == _ORDER_DOES_NOT_EXIST) {\\n                // First fill: validate order and permit maker asset\\n                require(SignatureChecker.isValidSignatureNow(order.maker, orderHash, signature), \\\"LOP: bad signature\\\");\\n                remainingMakerAmount = order.makingAmount;\\n                if (order.permit.length >= 20) {\\n                    // proceed only if permit length is enough to store address\\n                    (address token, bytes memory permit) = order.permit.decodeTargetAndCalldata();\\n                    _permitMemory(token, permit);\\n                    require(_remaining[orderHash] == _ORDER_DOES_NOT_EXIST, \\\"LOP: reentrancy detected\\\");\\n                }\\n            } else {\\n                unchecked { remainingMakerAmount -= 1; }\\n            }\\n\\n            // Check if order is valid\\n            if (order.predicate.length > 0) {\\n                require(checkPredicate(order), \\\"LOP: predicate returned false\\\");\\n            }\\n\\n            // Compute maker and taker assets amount\\n            if ((orderAmounts.takingAmount == 0) == (orderAmounts.makingAmount == 0)) {\\n                revert(\\\"LOP: only one amount should be 0\\\");\\n            } else if (orderAmounts.takingAmount == 0) {\\n                uint256 requestedMakingAmount = orderAmounts.makingAmount;\\n                if (orderAmounts.makingAmount > remainingMakerAmount) {\\n                    orderAmounts.makingAmount = remainingMakerAmount;\\n                }\\n                orderAmounts.takingAmount = _callGetter(order.getTakerAmount, order.makingAmount, orderAmounts.makingAmount, order.takingAmount);\\n                // check that actual rate is not worse than what was expected\\n                // orderAmounts.takingAmount / orderAmounts.makingAmount <= orderAmounts.thresholdAmount / requestedMakingAmount\\n                require(orderAmounts.takingAmount * requestedMakingAmount <= orderAmounts.thresholdAmount * orderAmounts.makingAmount, \\\"LOP: taking amount too high\\\");\\n            } else {\\n                uint256 requestedTakingAmount = orderAmounts.takingAmount;\\n                orderAmounts.makingAmount = _callGetter(order.getMakerAmount, order.takingAmount, orderAmounts.takingAmount, order.makingAmount);\\n                if (orderAmounts.makingAmount > remainingMakerAmount) {\\n                    orderAmounts.makingAmount = remainingMakerAmount;\\n                    orderAmounts.takingAmount = _callGetter(order.getTakerAmount, order.makingAmount, orderAmounts.makingAmount, order.takingAmount);\\n                }\\n                // check that actual rate is not worse than what was expected\\n                // orderAmounts.makingAmount / orderAmounts.takingAmount >= orderAmounts.thresholdAmount / requestedTakingAmount\\n                require(orderAmounts.makingAmount * requestedTakingAmount >= orderAmounts.thresholdAmount * orderAmounts.takingAmount, \\\"LOP: making amount too low\\\");\\n            }\\n\\n            require(orderAmounts.makingAmount > 0 && orderAmounts.takingAmount > 0, \\\"LOP: can't swap 0 amount\\\");\\n\\n            // Update remaining amount in storage\\n            unchecked {\\n                remainingMakerAmount = remainingMakerAmount - orderAmounts.makingAmount;\\n                _remaining[orderHash] = remainingMakerAmount + 1;\\n            }\\n            emit OrderFilled(msg.sender, orderHash, remainingMakerAmount);\\n        }\\n\\n        // Maker => Taker\\n        _makeCall(\\n            order.makerAsset,\\n            abi.encodePacked(\\n                IERC20.transferFrom.selector,\\n                uint256(uint160(order.maker)),\\n                uint256(uint160(target)),\\n                orderAmounts.makingAmount,\\n                order.makerAssetData\\n            )\\n        );\\n\\n        // Handle external extraInteraction\\n        if (extraInteraction.length >= 20) {\\n            // proceed only if interaction length is enough to store address\\n            (address interactionTarget, bytes memory interactionData) = extraInteraction.decodeTargetAndCalldata();\\n            InteractiveNotificationReceiver(interactionTarget).notifyFillOrder(\\n                msg.sender, order.makerAsset, order.takerAsset, orderAmounts.makingAmount, orderAmounts.takingAmount, interactionData\\n            );\\n        }\\n        \\n        // Taker => Maker\\n        _makeCall(\\n            order.takerAsset,\\n            abi.encodePacked(\\n                IERC20.transferFrom.selector,\\n                uint256(uint160(msg.sender)),\\n                uint256(uint160(order.receiver == address(0) ? order.maker : order.receiver)),\\n                orderAmounts.takingAmount,\\n                order.takerAssetData\\n            )\\n        );\\n\\n        // Maker can handle funds interactively\\n        if (order.interaction.length >= 20) {\\n            // proceed only if interaction length is enough to store address\\n            (address interactionTarget, bytes memory interactionData) = order.interaction.decodeTargetAndCalldata();\\n            InteractiveNotificationReceiver(interactionTarget).notifyFillOrder(\\n                msg.sender, order.makerAsset, order.takerAsset, orderAmounts.makingAmount, orderAmounts.takingAmount, interactionData\\n            );\\n        }\\n\\n        return (orderAmounts.makingAmount, orderAmounts.takingAmount);\\n    }\\n\\n    /// @notice Checks order predicate\\n    function checkPredicate(Order memory order) public view returns(bool) {\\n        bytes memory result = address(this).functionStaticCall(order.predicate, \\\"LOP: predicate call failed\\\");\\n        require(result.length == 32, \\\"LOP: invalid predicate return\\\");\\n        return result.decodeBool();\\n    }\\n\\n    function hashOrder(Order memory order) public view returns(bytes32) {\\n        StaticOrder memory staticOrder;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            staticOrder := order\\n        }\\n        return _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    LIMIT_ORDER_TYPEHASH,\\n                    staticOrder,\\n                    keccak256(order.makerAssetData),\\n                    keccak256(order.takerAssetData),\\n                    keccak256(order.getMakerAmount),\\n                    keccak256(order.getTakerAmount),\\n                    keccak256(order.predicate),\\n                    keccak256(order.permit),\\n                    keccak256(order.interaction)\\n                )\\n            )\\n        );\\n    }\\n\\n    function _makeCall(address asset, bytes memory assetData) private {\\n        bytes memory result = asset.functionCall(assetData, \\\"LOP: asset.call failed\\\");\\n        if (result.length > 0) {\\n            require(result.length == 32 && result.decodeBool(), \\\"LOP: asset.call bad result\\\");\\n        }\\n    }\\n\\n    function _callGetter(bytes memory getter, uint256 orderExpectedAmount, uint256 amount, uint256 orderResultAmount) private view returns(uint256) {\\n        if (getter.length == 0) {\\n            // On empty getter calldata only exact amount is allowed\\n            require(amount == orderExpectedAmount, \\\"LOP: wrong amount\\\");\\n            return orderResultAmount;\\n        } else {\\n            bytes memory result = address(this).functionStaticCall(abi.encodePacked(getter, amount), \\\"LOP: getAmount call failed\\\");\\n            require(result.length == 32, \\\"LOP: invalid getAmount return\\\");\\n            return result.decodeUint256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfff3a2e7fca71927a6513ce25cc8c30af6aba8fb71b91e960ee11432563afd42\",\"license\":\"MIT\"},\"contracts/OrderRFQMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./helpers/AmountCalculator.sol\\\";\\nimport \\\"./libraries/Permitable.sol\\\";\\n\\n/// @title RFQ Limit Order mixin\\nabstract contract OrderRFQMixin is EIP712, AmountCalculator, Permitable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Emitted when RFQ gets filled\\n    event OrderFilledRFQ(\\n        bytes32 orderHash,\\n        uint256 makingAmount\\n    );\\n\\n    struct OrderRFQ {\\n        uint256 info;  // lowest 64 bits is the order id, next 64 bits is the expiration timestamp\\n        IERC20 makerAsset;\\n        IERC20 takerAsset;\\n        address maker;\\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n    }\\n\\n    bytes32 constant public LIMIT_ORDER_RFQ_TYPEHASH = keccak256(\\n        \\\"OrderRFQ(uint256 info,address makerAsset,address takerAsset,address maker,address allowedSender,uint256 makingAmount,uint256 takingAmount)\\\"\\n    );\\n\\n    mapping(address => mapping(uint256 => uint256)) private _invalidator;\\n\\n    /// @notice Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\\n    /// @return Result Each bit represents whether corresponding was already invalidated\\n    function invalidatorForOrderRFQ(address maker, uint256 slot) external view returns(uint256) {\\n        return _invalidator[maker][slot];\\n    }\\n\\n    /// @notice Cancels order's quote\\n    function cancelOrderRFQ(uint256 orderInfo) external {\\n        _invalidateOrder(msg.sender, orderInfo);\\n    }\\n\\n    /// @notice Fills order's quote, fully or partially (whichever is possible)\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param makingAmount Making amount\\n    /// @param takingAmount Taking amount\\n    function fillOrderRFQ(\\n        OrderRFQ memory order,\\n        bytes calldata signature,\\n        uint256 makingAmount,\\n        uint256 takingAmount\\n    ) external returns(uint256, uint256) {\\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, msg.sender);\\n    }\\n\\n    /// @notice Fills Same as `fillOrderRFQ` but calls permit first,\\n    /// allowing to approve token spending and make a swap in one transaction.\\n    /// Also allows to specify funds destination instead of `msg.sender`\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param makingAmount Making amount\\n    /// @param takingAmount Taking amount\\n    /// @param target Address that will receive swap funds\\n    /// @param permit Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.\\n    /// @dev See tests for examples\\n    function fillOrderRFQToWithPermit(\\n        OrderRFQ memory order,\\n        bytes calldata signature,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        address target,\\n        bytes calldata permit\\n    ) external returns(uint256, uint256) {\\n        _permit(address(order.takerAsset), permit);\\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, target);\\n    }\\n\\n    /// @notice Same as `fillOrderRFQ` but allows to specify funds destination instead of `msg.sender`\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param makingAmount Making amount\\n    /// @param takingAmount Taking amount\\n    /// @param target Address that will receive swap funds\\n    function fillOrderRFQTo(\\n        OrderRFQ memory order,\\n        bytes calldata signature,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        address target\\n    ) public returns(uint256, uint256) {\\n        require(target != address(0), \\\"LOP: zero target is forbidden\\\");\\n\\n        address maker = order.maker;\\n\\n        // Validate order\\n        require(order.allowedSender == address(0) || order.allowedSender == msg.sender, \\\"LOP: private order\\\");\\n        bytes32 orderHash = hashOrderRFQ(order);\\n        require(SignatureChecker.isValidSignatureNow(maker, orderHash, signature), \\\"LOP: bad signature\\\");\\n\\n        {  // Stack too deep\\n            uint256 info = order.info;\\n            // Check time expiration\\n            uint256 expiration = uint128(info) >> 64;\\n            require(expiration == 0 || block.timestamp <= expiration, \\\"LOP: order expired\\\");  // solhint-disable-line not-rely-on-time\\n            _invalidateOrder(maker, info);\\n        }\\n\\n        {  // stack too deep\\n            uint256 orderMakingAmount = order.makingAmount;\\n            uint256 orderTakingAmount = order.takingAmount;\\n            // Compute partial fill if needed\\n            if (takingAmount == 0 && makingAmount == 0) {\\n                // Two zeros means whole order\\n                makingAmount = orderMakingAmount;\\n                takingAmount = orderTakingAmount;\\n            }\\n            else if (takingAmount == 0) {\\n                require(makingAmount <= orderMakingAmount, \\\"LOP: making amount exceeded\\\");\\n                takingAmount = getTakerAmount(orderMakingAmount, orderTakingAmount, makingAmount);\\n            }\\n            else if (makingAmount == 0) {\\n                require(takingAmount <= orderTakingAmount, \\\"LOP: taking amount exceeded\\\");\\n                makingAmount = getMakerAmount(orderMakingAmount, orderTakingAmount, takingAmount);\\n            }\\n            else {\\n                revert(\\\"LOP: both amounts are non-zero\\\");\\n            }\\n        }\\n\\n        require(makingAmount > 0 && takingAmount > 0, \\\"LOP: can't swap 0 amount\\\");\\n\\n        // Maker => Taker, Taker => Maker\\n        order.makerAsset.safeTransferFrom(maker, target, makingAmount);\\n        order.takerAsset.safeTransferFrom(msg.sender, maker, takingAmount);\\n\\n        emit OrderFilledRFQ(orderHash, makingAmount);\\n        return (makingAmount, takingAmount);\\n    }\\n\\n    function hashOrderRFQ(OrderRFQ memory order) public view returns(bytes32) {\\n        return _hashTypedDataV4(keccak256(abi.encode(LIMIT_ORDER_RFQ_TYPEHASH, order)));\\n    }\\n\\n    function _invalidateOrder(address maker, uint256 orderInfo) private {\\n        uint256 invalidatorSlot = uint64(orderInfo) >> 8;\\n        uint256 invalidatorBit = 1 << uint8(orderInfo);\\n        mapping(uint256 => uint256) storage invalidatorStorage = _invalidator[maker];\\n        uint256 invalidator = invalidatorStorage[invalidatorSlot];\\n        require(invalidator & invalidatorBit == 0, \\\"LOP: invalidated order\\\");\\n        invalidatorStorage[invalidatorSlot] = invalidator | invalidatorBit;\\n    }\\n}\\n\",\"keccak256\":\"0xe18399b1443a3d7aefd8f831c4d062b8227e60d0a870b206d17906673ff50b7d\",\"license\":\"MIT\"},\"contracts/helpers/AmountCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title A helper contract for calculations related to order amounts\\ncontract AmountCalculator {\\n    using Address for address;\\n\\n    /// @notice Calculates maker amount\\n    /// @return Result Floored maker amount\\n    function getMakerAmount(uint256 orderMakerAmount, uint256 orderTakerAmount, uint256 swapTakerAmount) public pure returns(uint256) {\\n        return swapTakerAmount * orderMakerAmount / orderTakerAmount;\\n    }\\n\\n    /// @notice Calculates taker amount\\n    /// @return Result Ceiled taker amount\\n    function getTakerAmount(uint256 orderMakerAmount, uint256 orderTakerAmount, uint256 swapMakerAmount) public pure returns(uint256) {\\n        return (swapMakerAmount * orderTakerAmount + orderMakerAmount - 1) / orderMakerAmount;\\n    }\\n\\n    /// @notice Performs an arbitrary call to target with data\\n    /// @return Result Bytes transmuted to uint256\\n    function arbitraryStaticCall(address target, bytes memory data) external view returns(uint256) {\\n        (bytes memory result) = target.functionStaticCall(data, \\\"AC: arbitraryStaticCall\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n}\\n\",\"keccak256\":\"0xc860f84f7f31c0f1d888a1c9ad442c60a3bb0e2a6c3879142c89dabb9e6631d8\",\"license\":\"MIT\"},\"contracts/helpers/ChainlinkCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n\\n/// @title A helper contract for interactions with https://docs.chain.link\\ncontract ChainlinkCalculator {\\n    using SafeCast for int256;\\n\\n    uint256 private constant _SPREAD_DENOMINATOR = 1e9;\\n    uint256 private constant _INVERSE_MASK = 1 << 255;\\n\\n    /// @notice Calculates price of token relative to oracle unit (ETH or USD)\\n    /// @param inverseAndSpread concatenated inverse flag and spread.\\n    /// Lowest 254 bits specify spread amount. Spread is scaled by 1e9, i.e. 101% = 1.01e9, 99% = 0.99e9.\\n    /// Highest bit is set when oracle price should be inverted,\\n    /// e.g. for DAI-ETH oracle, inverse=false means that we request DAI price in ETH\\n    /// and inverse=true means that we request ETH price in DAI\\n    /// @return Amount * spread * oracle price\\n    function singlePrice(AggregatorV3Interface oracle, uint256 inverseAndSpread, uint256 amount) external view returns(uint256) {\\n        (, int256 latestAnswer,,,) = oracle.latestRoundData();\\n        bool inverse = inverseAndSpread & _INVERSE_MASK > 0;\\n        uint256 spread = inverseAndSpread & (~_INVERSE_MASK);\\n        if (inverse) {\\n            return amount * spread * (10 ** oracle.decimals()) / latestAnswer.toUint256() / _SPREAD_DENOMINATOR;\\n        } else {\\n            return amount * spread * latestAnswer.toUint256() / (10 ** oracle.decimals()) / _SPREAD_DENOMINATOR;\\n        }\\n    }\\n\\n    /// @notice Calculates price of token A relative to token B. Note that order is important\\n    /// @return Result Token A relative price times amount\\n    function doublePrice(AggregatorV3Interface oracle1, AggregatorV3Interface oracle2, uint256 spread, int256 decimalsScale, uint256 amount) external view returns(uint256) {\\n        require(oracle1.decimals() == oracle2.decimals(), \\\"CC: oracle decimals don't match\\\");\\n        (, int256 latestAnswer1,,,) = oracle1.latestRoundData();\\n        (, int256 latestAnswer2,,,) = oracle2.latestRoundData();\\n        if (decimalsScale > 0) {\\n            return amount * spread * latestAnswer1.toUint256() * (10 ** decimalsScale.toUint256()) / latestAnswer2.toUint256() / _SPREAD_DENOMINATOR;\\n        } else if (decimalsScale < 0) {\\n            return amount * spread * latestAnswer1.toUint256() / latestAnswer2.toUint256() / _SPREAD_DENOMINATOR / (10 ** (-decimalsScale).toUint256());\\n        } else {\\n            return amount * spread * latestAnswer1.toUint256() / latestAnswer2.toUint256() / _SPREAD_DENOMINATOR;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe6ef9c685637811fe77e65950422756d59e77da2bdd19b54992545e21d1f9f4c\",\"license\":\"MIT\"},\"contracts/helpers/NonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title A helper contract for managing nonce of tx sender\\ncontract NonceManager {\\n    event NonceIncreased(address indexed maker, uint256 newNonce);\\n\\n    mapping(address => uint256) public nonce;\\n\\n    /// @notice Advances nonce by one\\n    function increaseNonce() external {\\n        advanceNonce(1);\\n    }\\n\\n    /// @notice Advances nonce by specified amount\\n    function advanceNonce(uint8 amount) public {\\n        uint256 newNonce = nonce[msg.sender] + amount;\\n        nonce[msg.sender] = newNonce;\\n        emit NonceIncreased(msg.sender, newNonce);\\n    }\\n\\n    /// @notice Checks if `makerAddress` has specified `makerNonce`\\n    /// @return Result True if `makerAddress` has specified nonce. Otherwise, false\\n    function nonceEquals(address makerAddress, uint256 makerNonce) external view returns(bool) {\\n        return nonce[makerAddress] == makerNonce;\\n    }\\n}\\n\",\"keccak256\":\"0xc4720b50987da0e870d18fe171a8d370d32ed14fb23c90d3024f864290f4410a\",\"license\":\"MIT\"},\"contracts/helpers/PredicateHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n\\n/// @title A helper contract for executing boolean functions on arbitrary target call results\\ncontract PredicateHelper {\\n    using Address for address;\\n\\n    /// @notice Calls every target with corresponding data\\n    /// @return Result True if call to any target returned True. Otherwise, false\\n    function or(address[] calldata targets, bytes[] calldata data) external view returns(bool) {\\n        require(targets.length == data.length, \\\"PH: input array size mismatch\\\");\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            bytes memory result = targets[i].functionStaticCall(data[i], \\\"PH: 'or' subcall failed\\\");\\n            require(result.length == 32, \\\"PH: invalid call result\\\");\\n            if (abi.decode(result, (bool))) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Calls every target with corresponding data\\n    /// @return Result True if calls to all targets returned True. Otherwise, false\\n    function and(address[] calldata targets, bytes[] calldata data) external view returns(bool) {\\n        require(targets.length == data.length, \\\"PH: input array size mismatch\\\");\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            bytes memory result = targets[i].functionStaticCall(data[i], \\\"PH: 'and' subcall failed\\\");\\n            require(result.length == 32, \\\"PH: invalid call result\\\");\\n            if (!abi.decode(result, (bool))) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's equal to the value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns the same value as `value`. Otherwise, false\\n    function eq(uint256 value, address target, bytes memory data) external view returns(bool) {\\n        bytes memory result = target.functionStaticCall(data, \\\"PH: eq\\\");\\n        require(result.length == 32, \\\"PH: invalid call result\\\");\\n        return abi.decode(result, (uint256)) == value;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's lower than value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns value which is lower than `value`. Otherwise, false\\n    function lt(uint256 value, address target, bytes memory data) external view returns(bool) {\\n        bytes memory result = target.functionStaticCall(data, \\\"PH: lt\\\");\\n        require(result.length == 32, \\\"PH: invalid call result\\\");\\n        return abi.decode(result, (uint256)) < value;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's bigger than value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns value which is bigger than `value`. Otherwise, false\\n    function gt(uint256 value, address target, bytes memory data) external view returns(bool) {\\n        bytes memory result = target.functionStaticCall(data, \\\"PH: gt\\\");\\n        require(result.length == 32, \\\"PH: invalid call result\\\");\\n        return abi.decode(result, (uint256)) > value;\\n    }\\n\\n    /// @notice Checks passed time against block timestamp\\n    /// @return Result True if current block timestamp is lower than `time`. Otherwise, false\\n    function timestampBelow(uint256 time) external view returns(bool) {\\n        return block.timestamp < time;  // solhint-disable-line not-rely-on-time\\n    }\\n}\\n\",\"keccak256\":\"0xdc704a9ccdaa14a7a5e3079e9951b6638613ece4bbb8255be4ce07a02db43bba\",\"license\":\"MIT\"},\"contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Interface for DAI-style permits\\ninterface IDaiLikePermit {\\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x284d908d08a39638c052f4fe7d81f38c0b170f289e185c8e918b517e48ff7d0c\",\"license\":\"MIT\"},\"contracts/interfaces/InteractiveNotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Interface for interactor which acts between `maker => taker` and `taker => maker` transfers.\\ninterface InteractiveNotificationReceiver {\\n    /// @notice Callback method that gets called after taker transferred funds to maker but before\\n    /// the opposite transfer happened\\n    function notifyFillOrder(\\n        address taker,\\n        address makerAsset,\\n        address takerAsset,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        bytes memory interactiveData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x94dd744e55a6eee1aa944b885d46c9ca5adc49bde5be854e08f8d4c31484a687\",\"license\":\"MIT\"},\"contracts/libraries/ArgumentsDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Library with gas efficient alternatives to `abi.decode`\\nlibrary ArgumentsDecoder {\\n    function decodeUint256(bytes memory data) internal pure returns(uint256) {\\n        uint256 value;\\n        assembly { // solhint-disable-line no-inline-assembly\\n            value := mload(add(data, 0x20))\\n        }\\n        return value;\\n    }\\n\\n    function decodeBool(bytes memory data) internal pure returns(bool) {\\n        bool value;\\n        assembly { // solhint-disable-line no-inline-assembly\\n            value := eq(mload(add(data, 0x20)), 1)\\n        }\\n        return value;\\n    }\\n\\n    function decodeTargetAndCalldata(bytes memory data) internal pure returns(address, bytes memory) {\\n        address target;\\n        bytes memory args;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            target := mload(add(data, 0x14))\\n            args := add(data, 0x14)\\n            mstore(args, sub(mload(data), 0x14))\\n        }\\n        return (target, args);\\n    }\\n\\n    function decodeTargetAndData(bytes calldata data) internal pure returns(address, bytes calldata) {\\n        address target;\\n        bytes calldata args;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            target := shr(96, calldataload(data.offset))\\n        }\\n        args = data[20:];\\n        return (target, args);\\n    }\\n}\\n\",\"keccak256\":\"0xb893e6e92297e67992217cbbea17bc4660b11ac7248c67a85cd77e96589edbed\",\"license\":\"MIT\"},\"contracts/libraries/Permitable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"./RevertReasonParser.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\n\\n/// @title Base contract with common permit handling logics\\nabstract contract Permitable {\\n    function _permit(address token, bytes calldata permit) internal {\\n        if (permit.length > 0) {\\n            bool success;\\n            bytes memory result;\\n            if (permit.length == 32 * 7) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\n            } else if (permit.length == 32 * 8) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(abi.encodePacked(IDaiLikePermit.permit.selector, permit));\\n            } else {\\n                revert(\\\"Wrong permit length\\\");\\n            }\\n            if (!success) {\\n                revert(RevertReasonParser.parse(result, \\\"Permit failed: \\\"));\\n            }\\n        }\\n    }\\n\\n    function _permitMemory(address token, bytes memory permit) internal {\\n        if (permit.length > 0) {\\n            bool success;\\n            bytes memory result;\\n            if (permit.length == 32 * 7) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\n            } else if (permit.length == 32 * 8) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(abi.encodePacked(IDaiLikePermit.permit.selector, permit));\\n            } else {\\n                revert(\\\"Wrong permit length\\\");\\n            }\\n            if (!success) {\\n                revert(RevertReasonParser.parse(result, \\\"Permit failed: \\\"));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318309b1174fb56d264fae004a5af600d7201b0ff3afbc414f51aac9d323bf36\",\"license\":\"MIT\"},\"contracts/libraries/RevertReasonParser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n\\n/// @title Library that allows to parse unsuccessful arbitrary calls revert reasons.\\n/// See https://solidity.readthedocs.io/en/latest/control-structures.html#revert for details.\\n/// Note that we assume revert reason being abi-encoded as Error(string) so it may fail to parse reason\\n/// if structured reverts appear in the future.\\n///\\n/// All unsuccessful parsings get encoded as Unknown(data) string\\nlibrary RevertReasonParser {\\n    bytes4 constant private _PANIC_SELECTOR = bytes4(keccak256(\\\"Panic(uint256)\\\"));\\n    bytes4 constant private _ERROR_SELECTOR = bytes4(keccak256(\\\"Error(string)\\\"));\\n\\n    function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\\n        if (data.length >= 4) {\\n            bytes4 selector;\\n\\n            assembly {  // solhint-disable-line no-inline-assembly\\n                selector := mload(add(data, 0x20))\\n            }\\n\\n            // 68 = 4-byte selector + 32 bytes offset + 32 bytes length\\n            if (selector == _ERROR_SELECTOR && data.length >= 68) {\\n                uint256 offset;\\n                bytes memory reason;\\n                assembly {  // solhint-disable-line no-inline-assembly\\n                    // 36 = 32 bytes data length + 4-byte selector\\n                    offset := mload(add(data, 36))\\n                    reason := add(data, add(36, offset))\\n                }\\n                /*\\n                    revert reason is padded up to 32 bytes with ABI encoder: Error(string)\\n                    also sometimes there is extra 32 bytes of zeros padded in the end:\\n                    https://github.com/ethereum/solidity/issues/10170\\n                    because of that we can't check for equality and instead check\\n                    that offset + string length + extra 36 bytes is less than overall data length\\n                */\\n                require(data.length >= 36 + offset + reason.length, \\\"Invalid revert reason\\\");\\n                return string(abi.encodePacked(prefix, \\\"Error(\\\", reason, \\\")\\\"));\\n            }\\n            // 36 = 4-byte selector + 32 bytes integer\\n            else if (selector == _PANIC_SELECTOR && data.length == 36) {\\n                uint256 code;\\n                assembly {  // solhint-disable-line no-inline-assembly\\n                    // 36 = 32 bytes data length + 4-byte selector\\n                    code := mload(add(data, 36))\\n                }\\n                return string(abi.encodePacked(prefix, \\\"Panic(\\\", _toHex(code), \\\")\\\"));\\n            }\\n        }\\n\\n        return string(abi.encodePacked(prefix, \\\"Unknown(\\\", _toHex(data), \\\")\\\"));\\n    }\\n\\n    function _toHex(uint256 value) private pure returns(string memory) {\\n        return _toHex(abi.encodePacked(value));\\n    }\\n\\n    function _toHex(bytes memory data) private pure returns(string memory) {\\n        bytes16 alphabet = 0x30313233343536373839616263646566;\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0xc7d030d543916c948fc060aef60b17430f6da93ee5bfb58a2555e553be1e1e8c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161139538038061139583398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161130461009160003960008181604b01526102a801526113046000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80637f94dd3314610046578063d73792a914610097578063dcfc73ca146100af575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100a1620f424081565b60405190815260200161008e565b6100c26100bd366004610c71565b6100c4565b005b73ffffffffffffffffffffffffffffffffffffffff8116610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f4257463a20496e76616c69642066656520726563697069656e74000000000060448201526064015b60405180910390fd5b600061016c620f4240610166858960c001516101ae90919063ffffffff16565b906101c1565b9050801561019b57602086015161019b9073ffffffffffffffffffffffffffffffffffffffff163384846101cd565b6101a6868686610268565b505050505050565b60006101ba8284610eae565b9392505050565b60006101ba8284610eeb565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610262908590610428565b50505050565b6040517ffa1cb9f200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fa1cb9f2906102dd90879060040161114b565b602060405180830381865afa1580156102fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031e919061115e565b905061036584606001518285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061053992505050565b6103cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f423a20626164207369676e6174757265000000000000000000000000000000604482015260640161013d565b80846060015173ffffffffffffffffffffffffffffffffffffffff167fc1624a2e52e06ce4ecf1f54498e7975056bb10117cd7fd48b6277fe4aa14ee1d86868660405161041a93929190611177565b60405180910390a350505050565b600061048a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107289092919063ffffffff16565b80519091501561053457808060200190518101906104a891906111db565b610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161013d565b505050565b6000806000610548858561073f565b90925090506000816004811115610561576105616111fd565b14801561059957508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156105a9576001925050506101ba565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016105de92919061122c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516106679190611245565b600060405180830381855afa9150503d80600081146106a2576040519150601f19603f3d011682016040523d82523d6000602084013e6106a7565b606091505b50915091508180156106ba575080516020145b801561071c575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906106f89083016020908101908401611261565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b98975050505050505050565b606061073784846000856107af565b949350505050565b6000808251604114156107765760208301516040840151606085015160001a61076a87828585610945565b945094505050506107a8565b8251604014156107a05760208301516040840151610795868383610a5d565b9350935050506107a8565b506000905060025b9250929050565b606082471015610841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161013d565b73ffffffffffffffffffffffffffffffffffffffff85163b6108bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161013d565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108e89190611245565b60006040518083038185875af1925050503d8060008114610925576040519150601f19603f3d011682016040523d82523d6000602084013e61092a565b606091505b509150915061093a828286610aaf565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561097c5750600090506003610a54565b8460ff16601b1415801561099457508460ff16601c14155b156109a55750600090506004610a54565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156109f9573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610a4d57600060019250925050610a54565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681610a9360ff86901c601b6112a3565b9050610aa187828885610945565b935093505050935093915050565b60608315610abe5750816101ba565b825115610ace5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d91906112bb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715610b5557610b55610b02565b60405290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b7f57600080fd5b919050565b600082601f830112610b9557600080fd5b813567ffffffffffffffff80821115610bb057610bb0610b02565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610bf657610bf6610b02565b81604052838152866020858801011115610c0f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f840112610c4157600080fd5b50813567ffffffffffffffff811115610c5957600080fd5b6020830191508360208285010111156107a857600080fd5b600080600080600060808688031215610c8957600080fd5b853567ffffffffffffffff80821115610ca157600080fd5b908701906101e0828a031215610cb657600080fd5b610cbe610b31565b82358152610cce60208401610b5b565b6020820152610cdf60408401610b5b565b6040820152610cf060608401610b5b565b6060820152610d0160808401610b5b565b6080820152610d1260a08401610b5b565b60a082015260c083013560c082015260e083013560e08201526101008084013583811115610d3f57600080fd5b610d4b8c828701610b84565b8284015250506101208084013583811115610d6557600080fd5b610d718c828701610b84565b8284015250506101408084013583811115610d8b57600080fd5b610d978c828701610b84565b8284015250506101608084013583811115610db157600080fd5b610dbd8c828701610b84565b8284015250506101808084013583811115610dd757600080fd5b610de38c828701610b84565b8284015250506101a08084013583811115610dfd57600080fd5b610e098c828701610b84565b8284015250506101c08084013583811115610e2357600080fd5b610e2f8c828701610b84565b828401525050809750506020880135915080821115610e4d57600080fd5b50610e5a88828901610c2f565b90955093505060408601359150610e7360608701610b5b565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ee657610ee6610e7f565b500290565b600082610f21577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60005b83811015610f41578181015183820152602001610f29565b838111156102625750506000910152565b60008151808452610f6a816020860160208601610f26565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006101e0825184526020830151610fcc602086018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151610ff4604086018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015161101c606086018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151611044608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a083015161106c60a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160c085015260e083015160e085015261010080840151828287015261109983870182610f52565b9250505061012080840151858303828701526110b58382610f52565b9250505061014080840151858303828701526110d18382610f52565b9250505061016080840151858303828701526110ed8382610f52565b9250505061018080840151858303828701526111098382610f52565b925050506101a080840151858303828701526111258382610f52565b925050506101c080840151858303828701526111418382610f52565b9695505050505050565b6020815260006101ba6020830184610f9c565b60006020828403121561117057600080fd5b5051919050565b60408152600061118a6040830186610f9c565b82810360208401528381528385602083013760006020858301015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116820101915050949350505050565b6000602082840312156111ed57600080fd5b815180151581146101ba57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8281526040602082015260006107376040830184610f52565b60008251611257818460208701610f26565b9190910192915050565b60006020828403121561127357600080fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146101ba57600080fd5b600082198211156112b6576112b6610e7f565b500190565b6020815260006101ba6020830184610f5256fea2646970667358221220e673f7f09fcddc2c60e27e489e8a0e225494b3dcaf878bddce54a04e947eee8264736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80637f94dd3314610046578063d73792a914610097578063dcfc73ca146100af575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100a1620f424081565b60405190815260200161008e565b6100c26100bd366004610c71565b6100c4565b005b73ffffffffffffffffffffffffffffffffffffffff8116610146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f4257463a20496e76616c69642066656520726563697069656e74000000000060448201526064015b60405180910390fd5b600061016c620f4240610166858960c001516101ae90919063ffffffff16565b906101c1565b9050801561019b57602086015161019b9073ffffffffffffffffffffffffffffffffffffffff163384846101cd565b6101a6868686610268565b505050505050565b60006101ba8284610eae565b9392505050565b60006101ba8284610eeb565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610262908590610428565b50505050565b6040517ffa1cb9f200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fa1cb9f2906102dd90879060040161114b565b602060405180830381865afa1580156102fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031e919061115e565b905061036584606001518285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061053992505050565b6103cb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f423a20626164207369676e6174757265000000000000000000000000000000604482015260640161013d565b80846060015173ffffffffffffffffffffffffffffffffffffffff167fc1624a2e52e06ce4ecf1f54498e7975056bb10117cd7fd48b6277fe4aa14ee1d86868660405161041a93929190611177565b60405180910390a350505050565b600061048a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166107289092919063ffffffff16565b80519091501561053457808060200190518101906104a891906111db565b610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161013d565b505050565b6000806000610548858561073f565b90925090506000816004811115610561576105616111fd565b14801561059957508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156105a9576001925050506101ba565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b88886040516024016105de92919061122c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516106679190611245565b600060405180830381855afa9150503d80600081146106a2576040519150601f19603f3d011682016040523d82523d6000602084013e6106a7565b606091505b50915091508180156106ba575080516020145b801561071c575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906106f89083016020908101908401611261565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b98975050505050505050565b606061073784846000856107af565b949350505050565b6000808251604114156107765760208301516040840151606085015160001a61076a87828585610945565b945094505050506107a8565b8251604014156107a05760208301516040840151610795868383610a5d565b9350935050506107a8565b506000905060025b9250929050565b606082471015610841576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161013d565b73ffffffffffffffffffffffffffffffffffffffff85163b6108bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161013d565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516108e89190611245565b60006040518083038185875af1925050503d8060008114610925576040519150601f19603f3d011682016040523d82523d6000602084013e61092a565b606091505b509150915061093a828286610aaf565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561097c5750600090506003610a54565b8460ff16601b1415801561099457508460ff16601c14155b156109a55750600090506004610a54565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156109f9573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610a4d57600060019250925050610a54565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681610a9360ff86901c601b6112a3565b9050610aa187828885610945565b935093505050935093915050565b60608315610abe5750816101ba565b825115610ace5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013d91906112bb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715610b5557610b55610b02565b60405290565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b7f57600080fd5b919050565b600082601f830112610b9557600080fd5b813567ffffffffffffffff80821115610bb057610bb0610b02565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715610bf657610bf6610b02565b81604052838152866020858801011115610c0f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f840112610c4157600080fd5b50813567ffffffffffffffff811115610c5957600080fd5b6020830191508360208285010111156107a857600080fd5b600080600080600060808688031215610c8957600080fd5b853567ffffffffffffffff80821115610ca157600080fd5b908701906101e0828a031215610cb657600080fd5b610cbe610b31565b82358152610cce60208401610b5b565b6020820152610cdf60408401610b5b565b6040820152610cf060608401610b5b565b6060820152610d0160808401610b5b565b6080820152610d1260a08401610b5b565b60a082015260c083013560c082015260e083013560e08201526101008084013583811115610d3f57600080fd5b610d4b8c828701610b84565b8284015250506101208084013583811115610d6557600080fd5b610d718c828701610b84565b8284015250506101408084013583811115610d8b57600080fd5b610d978c828701610b84565b8284015250506101608084013583811115610db157600080fd5b610dbd8c828701610b84565b8284015250506101808084013583811115610dd757600080fd5b610de38c828701610b84565b8284015250506101a08084013583811115610dfd57600080fd5b610e098c828701610b84565b8284015250506101c08084013583811115610e2357600080fd5b610e2f8c828701610b84565b828401525050809750506020880135915080821115610e4d57600080fd5b50610e5a88828901610c2f565b90955093505060408601359150610e7360608701610b5b565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ee657610ee6610e7f565b500290565b600082610f21577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60005b83811015610f41578181015183820152602001610f29565b838111156102625750506000910152565b60008151808452610f6a816020860160208601610f26565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60006101e0825184526020830151610fcc602086018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151610ff4604086018273ffffffffffffffffffffffffffffffffffffffff169052565b50606083015161101c606086018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151611044608086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a083015161106c60a086018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160c085015260e083015160e085015261010080840151828287015261109983870182610f52565b9250505061012080840151858303828701526110b58382610f52565b9250505061014080840151858303828701526110d18382610f52565b9250505061016080840151858303828701526110ed8382610f52565b9250505061018080840151858303828701526111098382610f52565b925050506101a080840151858303828701526111258382610f52565b925050506101c080840151858303828701526111418382610f52565b9695505050505050565b6020815260006101ba6020830184610f9c565b60006020828403121561117057600080fd5b5051919050565b60408152600061118a6040830186610f9c565b82810360208401528381528385602083013760006020858301015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116820101915050949350505050565b6000602082840312156111ed57600080fd5b815180151581146101ba57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8281526040602082015260006107376040830184610f52565b60008251611257818460208701610f26565b9190910192915050565b60006020828403121561127357600080fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146101ba57600080fd5b600082198211156112b6576112b6610e7f565b500190565b6020815260006101ba6020830184610f5256fea2646970667358221220e673f7f09fcddc2c60e27e489e8a0e225494b3dcaf878bddce54a04e947eee8264736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Public order book with fees",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OrderBroadcasted(address,bytes32,(uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes)": {
        "notice": "Emitted every time an order is broadcasted"
      }
    },
    "kind": "user",
    "methods": {
      "FEE_DENOMINATOR()": {
        "notice": "Denominator for the fee"
      },
      "limitOrderProtocol()": {
        "notice": "The limit order protocol this orderbook references"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}