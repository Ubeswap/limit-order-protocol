{
  "address": "0x38266325549736089cAa5FF9b4a2Bdb07Fd5d6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ILimitOrderProtocol",
          "name": "_limitOrderProtocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "OrderBroadcasted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILimitOrderProtocol.Order",
          "name": "_order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "broadcastOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limitOrderProtocol",
      "outputs": [
        {
          "internalType": "contract ILimitOrderProtocol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_orderHash",
          "type": "bytes32"
        }
      ],
      "name": "orders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct ILimitOrderProtocol.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "signatures",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6aa26702e75b15d2453dbcf1aaa9613b4d078e5531ec1a0b621f361c7d83dc0",
  "receipt": {
    "to": null,
    "from": "0x4C828d2A58B747De3598C2Ce18a0908b0e78dC3e",
    "contractAddress": "0x38266325549736089cAa5FF9b4a2Bdb07Fd5d6C9",
    "transactionIndex": 2,
    "gasUsed": "1670257",
    "logsBloom": "0x
    "blockHash": "0x201b083fce2a94442c7f42d71629537fcc92b4d3a1ddece982bd382d6c3817c8",
    "transactionHash": "0xd6aa26702e75b15d2453dbcf1aaa9613b4d078e5531ec1a0b621f361c7d83dc0",
    "logs": [],
    "blockNumber": 10194356,
    "cumulativeGasUsed": "2086371",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3927846Ef15359b3DD4Ae6437C1BF9b71244ba37"
  ],
  "numDeployments": 1,
  "solcInputHash": "3a76eeb7906035458241204b6f1ab5a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ILimitOrderProtocol\",\"name\":\"_limitOrderProtocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"OrderBroadcasted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct ILimitOrderProtocol.Order\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"broadcastOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitOrderProtocol\",\"outputs\":[{\"internalType\":\"contract ILimitOrderProtocol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_orderHash\",\"type\":\"bytes32\"}],\"name\":\"orders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct ILimitOrderProtocol.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"signatures\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"orders(bytes32)\":{\"params\":{\"_orderHash\":\"An order's hash to fetch the underlying order\"},\"returns\":{\"order\":\"The order that corresponds to the _orderHash\"}}},\"title\":\"Public order book with fees\",\"version\":1},\"userdoc\":{\"events\":{\"OrderBroadcasted(address,bytes32)\":{\"notice\":\"Emitted every time an order is broadcasted\"}},\"kind\":\"user\",\"methods\":{\"BPS()\":{\"notice\":\"Denominator for bps\"},\"limitOrderProtocol()\":{\"notice\":\"The limit order protocol this orderbook references\"},\"orders(bytes32)\":{\"notice\":\"Get a broadcasted order\"},\"signatures(bytes32)\":{\"notice\":\"Mapping from order hash to an Order's signature\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrderBookWithFee.sol\":\"OrderBookWithFee\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/OrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\ninterface ILimitOrderProtocol {\\n    // Imported from OrderMixin\\n    struct Order {\\n        uint256 salt;\\n        address makerAsset;\\n        address takerAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender; // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n        bytes makerAssetData;\\n        bytes takerAssetData;\\n        bytes getMakerAmount; // this.staticcall(abi.encodePacked(bytes, swapTakerAmount)) => (swapMakerAmount)\\n        bytes getTakerAmount; // this.staticcall(abi.encodePacked(bytes, swapMakerAmount)) => (swapTakerAmount)\\n        bytes predicate; // this.staticcall(bytes) => (bool)\\n        bytes permit; // On first fill: permit.1.call(abi.encodePacked(permit.selector, permit.2))\\n        bytes interaction;\\n    }\\n\\n    function hashOrder(Order memory order) external view returns (bytes32);\\n}\\n\\n/// @title Public order book for Order\\n// solhint-disable-next-line max-states-count\\ncontract OrderBook {\\n    /// @notice The limit order protocol this orderbook references\\n    ILimitOrderProtocol public immutable limitOrderProtocol;\\n\\n    /// @notice Mapping from order hash to an Order's signature\\n    mapping(bytes32 => bytes) public signatures;\\n\\n    // Deconstructed mappings for an Order\\n    mapping(bytes32 => uint256) internal _salts;\\n    mapping(bytes32 => address) internal _makerAssets;\\n    mapping(bytes32 => address) internal _takerAssets;\\n    mapping(bytes32 => address) internal _makers;\\n    mapping(bytes32 => address) internal _receivers;\\n    mapping(bytes32 => address) internal _allowedSenders;\\n    mapping(bytes32 => uint256) internal _makingAmounts;\\n    mapping(bytes32 => uint256) internal _takingAmounts;\\n    mapping(bytes32 => bytes) internal _makerAssetDatas;\\n    mapping(bytes32 => bytes) internal _takerAssetDatas;\\n    mapping(bytes32 => bytes) internal _getMakerAmounts;\\n    mapping(bytes32 => bytes) internal _getTakerAmounts;\\n    mapping(bytes32 => bytes) internal _predicates;\\n    mapping(bytes32 => bytes) internal _permits;\\n    mapping(bytes32 => bytes) internal _interactions;\\n\\n    /// @notice Emitted every time an order is broadcasted\\n    event OrderBroadcasted(address indexed maker, bytes32 orderHash);\\n\\n    constructor(ILimitOrderProtocol _limitOrderProtocol) {\\n        limitOrderProtocol = _limitOrderProtocol;\\n    }\\n\\n    /// @notice Broadcast a limit order with its signature\\n    /// @param _order The order to broadcast\\n    /// @param _signature The order's signature. Should be signed by _order.maker\\n    function _broadcastOrder(\\n        ILimitOrderProtocol.Order memory _order,\\n        bytes calldata _signature\\n    ) internal virtual {\\n        bytes32 orderHash = limitOrderProtocol.hashOrder(_order);\\n        require(\\n            SignatureChecker.isValidSignatureNow(\\n                _order.maker,\\n                orderHash,\\n                _signature\\n            ),\\n            \\\"OB: bad signature\\\"\\n        );\\n\\n        _salts[orderHash] = _order.salt;\\n        _makerAssets[orderHash] = _order.makerAsset;\\n        _takerAssets[orderHash] = _order.takerAsset;\\n        _makers[orderHash] = _order.maker;\\n        _receivers[orderHash] = _order.receiver;\\n        _allowedSenders[orderHash] = _order.allowedSender;\\n        _makingAmounts[orderHash] = _order.makingAmount;\\n        _takingAmounts[orderHash] = _order.takingAmount;\\n        _makerAssetDatas[orderHash] = _order.makerAssetData;\\n        _takerAssetDatas[orderHash] = _order.takerAssetData;\\n        _getMakerAmounts[orderHash] = _order.getMakerAmount;\\n        _getTakerAmounts[orderHash] = _order.getTakerAmount;\\n        _predicates[orderHash] = _order.predicate;\\n        _permits[orderHash] = _order.permit;\\n        _interactions[orderHash] = _order.interaction;\\n\\n        signatures[orderHash] = _signature;\\n        emit OrderBroadcasted(_order.maker, orderHash);\\n    }\\n\\n    /// @notice Get a broadcasted order\\n    /// @param _orderHash An order's hash to fetch the underlying order\\n    /// @return order The order that corresponds to the _orderHash\\n    function orders(bytes32 _orderHash)\\n        external\\n        view\\n        returns (ILimitOrderProtocol.Order memory order)\\n    {\\n        order = ILimitOrderProtocol.Order({\\n            salt: _salts[_orderHash],\\n            makerAsset: _makerAssets[_orderHash],\\n            takerAsset: _takerAssets[_orderHash],\\n            maker: _makers[_orderHash],\\n            receiver: _receivers[_orderHash],\\n            allowedSender: _allowedSenders[_orderHash],\\n            makingAmount: _makingAmounts[_orderHash],\\n            takingAmount: _takingAmounts[_orderHash],\\n            makerAssetData: _makerAssetDatas[_orderHash],\\n            takerAssetData: _takerAssetDatas[_orderHash],\\n            getMakerAmount: _getMakerAmounts[_orderHash],\\n            getTakerAmount: _getTakerAmounts[_orderHash],\\n            predicate: _predicates[_orderHash],\\n            permit: _permits[_orderHash],\\n            interaction: _interactions[_orderHash]\\n        });\\n    }\\n}\\n\",\"keccak256\":\"0x9d6ad0ebcca9d397139fa2b77bc500d60ee0db9b0fc75b3b6dfe913c936e4254\",\"license\":\"MIT\"},\"contracts/OrderBookWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./OrderBook.sol\\\";\\n\\n/// @title Public order book with fees\\ncontract OrderBookWithFee is OrderBook {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    /// @notice Denominator for bps\\n    uint256 public constant BPS = 1000;\\n\\n    constructor(ILimitOrderProtocol _limitOrderProtocol)\\n        OrderBook(_limitOrderProtocol)\\n    {}\\n\\n    function broadcastOrder(\\n        ILimitOrderProtocol.Order memory _order,\\n        bytes calldata _signature,\\n        uint256 _fee,\\n        address _feeRecipient\\n    ) public {\\n        require(_feeRecipient != address(0), \\\"OBWF: Invalid fee recipient\\\");\\n        uint256 feeAmount = _fee.mul(_order.makingAmount).div(BPS);\\n        if (feeAmount > 0) {\\n            IERC20(_order.makerAsset).safeTransferFrom(\\n                msg.sender,\\n                _feeRecipient,\\n                feeAmount\\n            );\\n        }\\n        _broadcastOrder(_order, _signature);\\n    }\\n}\\n\",\"keccak256\":\"0x0d182334957e1c72f3f4f1830bb764a75baedaefbb30587624d31a80f82bc639\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051611de9380380611de983398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611d586100916000396000818160b101526109a60152611d586000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80637f94dd33116100505780637f94dd33146100ac5780639c3f1e90146100f8578063dcfc73ca1461011857600080fd5b80632422224e1461006c578063249d39e914610095575b600080fd5b61007f61007a36600461153a565b61012d565b60405161008c91906115c9565b60405180910390f35b61009e6103e881565b60405190815260200161008c565b6100d37f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b61010b61010636600461153a565b6101c7565b60405161008c91906115dc565b61012b610126366004611920565b6107c3565b005b6000602081905290815260409020805461014690611b2e565b80601f016020809104026020016040519081016040528092919081815260200182805461017290611b2e565b80156101bf5780601f10610194576101008083540402835291602001916101bf565b820191906000526020600020905b8154815290600101906020018083116101a257829003601f168201915b505050505081565b6102ae604051806101e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604080516101e081018252600084815260016020908152838220548352858252600281528382205473ffffffffffffffffffffffffffffffffffffffff90811682850152868352600382528483205481168486015286835260048252848320548116606085015286835260058252848320548116608085015286835260068252848320541660a0840152858252600781528382205460c0840152858252600881528382205460e0840152858252600990529190912080546101008301919061037590611b2e565b80601f01602080910402602001604051908101604052809291908181526020018280546103a190611b2e565b80156103ee5780601f106103c3576101008083540402835291602001916103ee565b820191906000526020600020905b8154815290600101906020018083116103d157829003601f168201915b50505050508152602001600a6000858152602001908152602001600020805461041690611b2e565b80601f016020809104026020016040519081016040528092919081815260200182805461044290611b2e565b801561048f5780601f106104645761010080835404028352916020019161048f565b820191906000526020600020905b81548152906001019060200180831161047257829003601f168201915b50505050508152602001600b600085815260200190815260200160002080546104b790611b2e565b80601f01602080910402602001604051908101604052809291908181526020018280546104e390611b2e565b80156105305780601f1061050557610100808354040283529160200191610530565b820191906000526020600020905b81548152906001019060200180831161051357829003601f168201915b50505050508152602001600c6000858152602001908152602001600020805461055890611b2e565b80601f016020809104026020016040519081016040528092919081815260200182805461058490611b2e565b80156105d15780601f106105a6576101008083540402835291602001916105d1565b820191906000526020600020905b8154815290600101906020018083116105b457829003601f168201915b50505050508152602001600d600085815260200190815260200160002080546105f990611b2e565b80601f016020809104026020016040519081016040528092919081815260200182805461062590611b2e565b80156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b50505050508152602001600e6000858152602001908152602001600020805461069a90611b2e565b80601f01602080910402602001604051908101604052809291908181526020018280546106c690611b2e565b80156107135780601f106106e857610100808354040283529160200191610713565b820191906000526020600020905b8154815290600101906020018083116106f657829003601f168201915b50505050508152602001600f6000858152602001908152602001600020805461073b90611b2e565b80601f016020809104026020016040519081016040528092919081815260200182805461076790611b2e565b80156107b45780601f10610789576101008083540402835291602001916107b4565b820191906000526020600020905b81548152906001019060200180831161079757829003601f168201915b50505050508152509050919050565b73ffffffffffffffffffffffffffffffffffffffff8116610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f4257463a20496e76616c69642066656520726563697069656e74000000000060448201526064015b60405180910390fd5b600061086a6103e86108648860c00151866108ac90919063ffffffff16565b906108bf565b905080156108995760208601516108999073ffffffffffffffffffffffffffffffffffffffff163384846108cb565b6108a4868686610966565b505050505050565b60006108b88284611bb1565b9392505050565b60006108b88284611bee565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610960908590610d35565b50505050565b6040517ffa1cb9f200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fa1cb9f2906109db9087906004016115dc565b602060405180830381865afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190611c29565b9050610a6384606001518285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e4692505050565b610ac9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f423a20626164207369676e6174757265000000000000000000000000000000604482015260640161083c565b8351600082815260016020908152604080832093909355808701516002825283832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617909155848901516003845285852080548316918416919091179055606089015160048452858520805483169184169190911790556080890151600584528585208054831691841691909117905560a0890151600684528585208054909216921691909117905560c0870151600782528383205560e0870151600882528383205561010087015160098252929091208251610bca939192919091019061140f565b506101208401516000828152600a602090815260409091208251610bf39391929091019061140f565b506101408401516000828152600b602090815260409091208251610c1c9391929091019061140f565b506101608401516000828152600c602090815260409091208251610c459391929091019061140f565b506101808401516000828152600d602090815260409091208251610c6e9391929091019061140f565b506101a08401516000828152600e602090815260409091208251610c979391929091019061140f565b506101c08401516000828152600f602090815260409091208251610cc09391929091019061140f565b506000818152602081905260409020610cda908484611493565b50836060015173ffffffffffffffffffffffffffffffffffffffff167fdf482aa70d52efefab20dbfaf9cc2b0cb880c75e72e26972c9c5d29c2c02f56382604051610d2791815260200190565b60405180910390a250505050565b6000610d97826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110359092919063ffffffff16565b805190915015610e415780806020019051810190610db59190611c42565b610e41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161083c565b505050565b6000806000610e55858561104c565b90925090506000816004811115610e6e57610e6e611c64565b148015610ea657508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15610eb6576001925050506108b8565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8888604051602401610eeb929190611c93565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610f749190611cac565b600060405180830381855afa9150503d8060008114610faf576040519150601f19603f3d011682016040523d82523d6000602084013e610fb4565b606091505b5091509150818015610fc7575080516020145b8015611029575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906110059083016020908101908401611cc8565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b98975050505050505050565b606061104484846000856110bc565b949350505050565b6000808251604114156110835760208301516040840151606085015160001a61107787828585611252565b945094505050506110b5565b8251604014156110ad57602083015160408401516110a286838361136a565b9350935050506110b5565b506000905060025b9250929050565b60608247101561114e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161083c565b73ffffffffffffffffffffffffffffffffffffffff85163b6111cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161083c565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516111f59190611cac565b60006040518083038185875af1925050503d8060008114611232576040519150601f19603f3d011682016040523d82523d6000602084013e611237565b606091505b50915091506112478282866113bc565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112895750600090506003611361565b8460ff16601b141580156112a157508460ff16601c14155b156112b25750600090506004611361565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611306573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661135a57600060019250925050611361565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816113a060ff86901c601b611d0a565b90506113ae87828885611252565b935093505050935093915050565b606083156113cb5750816108b8565b8251156113db5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c91906115c9565b82805461141b90611b2e565b90600052602060002090601f01602090048101928261143d5760008555611483565b82601f1061145657805160ff1916838001178555611483565b82800160010185558215611483579182015b82811115611483578251825591602001919060010190611468565b5061148f929150611525565b5090565b82805461149f90611b2e565b90600052602060002090601f0160209004810192826114c15760008555611483565b82601f106114f8578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555611483565b82800160010185558215611483579182015b8281111561148357823582559160200191906001019061150a565b5b8082111561148f5760008155600101611526565b60006020828403121561154c57600080fd5b5035919050565b60005b8381101561156e578181015183820152602001611556565b838111156109605750506000910152565b60008151808452611597816020860160208601611553565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006108b8602083018461157f565b602081528151602082015260006020830151611610604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff8116606084015250606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015160e083015260e08301516101008181850152808501519150506101e061012081818601526116d061020086018461157f565b92508086015190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061014081878603018188015261170f858461157f565b94508088015192505061016081878603018188015261172e858461157f565b94508088015192505061018081878603018188015261174d858461157f565b9450808801519250506101a081878603018188015261176c858461157f565b9450808801519250506101c081878603018188015261178b858461157f565b9088015187820390920184880152935090506117a7838261157f565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715611804576118046117b1565b60405290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461182e57600080fd5b919050565b600082601f83011261184457600080fd5b813567ffffffffffffffff8082111561185f5761185f6117b1565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156118a5576118a56117b1565b816040528381528660208588010111156118be57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f8401126118f057600080fd5b50813567ffffffffffffffff81111561190857600080fd5b6020830191508360208285010111156110b557600080fd5b60008060008060006080868803121561193857600080fd5b853567ffffffffffffffff8082111561195057600080fd5b908701906101e0828a03121561196557600080fd5b61196d6117e0565b8235815261197d6020840161180a565b602082015261198e6040840161180a565b604082015261199f6060840161180a565b60608201526119b06080840161180a565b60808201526119c160a0840161180a565b60a082015260c083013560c082015260e083013560e082015261010080840135838111156119ee57600080fd5b6119fa8c828701611833565b8284015250506101208084013583811115611a1457600080fd5b611a208c828701611833565b8284015250506101408084013583811115611a3a57600080fd5b611a468c828701611833565b8284015250506101608084013583811115611a6057600080fd5b611a6c8c828701611833565b8284015250506101808084013583811115611a8657600080fd5b611a928c828701611833565b8284015250506101a08084013583811115611aac57600080fd5b611ab88c828701611833565b8284015250506101c08084013583811115611ad257600080fd5b611ade8c828701611833565b828401525050809750506020880135915080821115611afc57600080fd5b50611b09888289016118de565b90955093505060408601359150611b226060870161180a565b90509295509295909350565b600181811c90821680611b4257607f821691505b60208210811415611b7c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611be957611be9611b82565b500290565b600082611c24577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215611c3b57600080fd5b5051919050565b600060208284031215611c5457600080fd5b815180151581146108b857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b828152604060208201526000611044604083018461157f565b60008251611cbe818460208701611553565b9190910192915050565b600060208284031215611cda57600080fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146108b857600080fd5b60008219821115611d1d57611d1d611b82565b50019056fea2646970667358221220827ce78b6d511d9ebae855b4ca23a24378063f68ceacfa5c38ebdb3e1e3ac1b964736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100675760003560e01c80637f94dd33116100505780637f94dd33146100ac5780639c3f1e90146100f8578063dcfc73ca1461011857600080fd5b80632422224e1461006c578063249d39e914610095575b600080fd5b61007f61007a36600461153a565b61012d565b60405161008c91906115c9565b60405180910390f35b61009e6103e881565b60405190815260200161008c565b6100d37f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161008c565b61010b61010636600461153a565b6101c7565b60405161008c91906115dc565b61012b610126366004611920565b6107c3565b005b6000602081905290815260409020805461014690611b2e565b80601f016020809104026020016040519081016040528092919081815260200182805461017290611b2e565b80156101bf5780601f10610194576101008083540402835291602001916101bf565b820191906000526020600020905b8154815290600101906020018083116101a257829003601f168201915b505050505081565b6102ae604051806101e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001606081525090565b604080516101e081018252600084815260016020908152838220548352858252600281528382205473ffffffffffffffffffffffffffffffffffffffff90811682850152868352600382528483205481168486015286835260048252848320548116606085015286835260058252848320548116608085015286835260068252848320541660a0840152858252600781528382205460c0840152858252600881528382205460e0840152858252600990529190912080546101008301919061037590611b2e565b80601f01602080910402602001604051908101604052809291908181526020018280546103a190611b2e565b80156103ee5780601f106103c3576101008083540402835291602001916103ee565b820191906000526020600020905b8154815290600101906020018083116103d157829003601f168201915b50505050508152602001600a6000858152602001908152602001600020805461041690611b2e565b80601f016020809104026020016040519081016040528092919081815260200182805461044290611b2e565b801561048f5780601f106104645761010080835404028352916020019161048f565b820191906000526020600020905b81548152906001019060200180831161047257829003601f168201915b50505050508152602001600b600085815260200190815260200160002080546104b790611b2e565b80601f01602080910402602001604051908101604052809291908181526020018280546104e390611b2e565b80156105305780601f1061050557610100808354040283529160200191610530565b820191906000526020600020905b81548152906001019060200180831161051357829003601f168201915b50505050508152602001600c6000858152602001908152602001600020805461055890611b2e565b80601f016020809104026020016040519081016040528092919081815260200182805461058490611b2e565b80156105d15780601f106105a6576101008083540402835291602001916105d1565b820191906000526020600020905b8154815290600101906020018083116105b457829003601f168201915b50505050508152602001600d600085815260200190815260200160002080546105f990611b2e565b80601f016020809104026020016040519081016040528092919081815260200182805461062590611b2e565b80156106725780601f1061064757610100808354040283529160200191610672565b820191906000526020600020905b81548152906001019060200180831161065557829003601f168201915b50505050508152602001600e6000858152602001908152602001600020805461069a90611b2e565b80601f01602080910402602001604051908101604052809291908181526020018280546106c690611b2e565b80156107135780601f106106e857610100808354040283529160200191610713565b820191906000526020600020905b8154815290600101906020018083116106f657829003601f168201915b50505050508152602001600f6000858152602001908152602001600020805461073b90611b2e565b80601f016020809104026020016040519081016040528092919081815260200182805461076790611b2e565b80156107b45780601f10610789576101008083540402835291602001916107b4565b820191906000526020600020905b81548152906001019060200180831161079757829003601f168201915b50505050508152509050919050565b73ffffffffffffffffffffffffffffffffffffffff8116610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4f4257463a20496e76616c69642066656520726563697069656e74000000000060448201526064015b60405180910390fd5b600061086a6103e86108648860c00151866108ac90919063ffffffff16565b906108bf565b905080156108995760208601516108999073ffffffffffffffffffffffffffffffffffffffff163384846108cb565b6108a4868686610966565b505050505050565b60006108b88284611bb1565b9392505050565b60006108b88284611bee565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052610960908590610d35565b50505050565b6040517ffa1cb9f200000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063fa1cb9f2906109db9087906004016115dc565b602060405180830381865afa1580156109f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1c9190611c29565b9050610a6384606001518285858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610e4692505050565b610ac9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4f423a20626164207369676e6174757265000000000000000000000000000000604482015260640161083c565b8351600082815260016020908152604080832093909355808701516002825283832080547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff93841617909155848901516003845285852080548316918416919091179055606089015160048452858520805483169184169190911790556080890151600584528585208054831691841691909117905560a0890151600684528585208054909216921691909117905560c0870151600782528383205560e0870151600882528383205561010087015160098252929091208251610bca939192919091019061140f565b506101208401516000828152600a602090815260409091208251610bf39391929091019061140f565b506101408401516000828152600b602090815260409091208251610c1c9391929091019061140f565b506101608401516000828152600c602090815260409091208251610c459391929091019061140f565b506101808401516000828152600d602090815260409091208251610c6e9391929091019061140f565b506101a08401516000828152600e602090815260409091208251610c979391929091019061140f565b506101c08401516000828152600f602090815260409091208251610cc09391929091019061140f565b506000818152602081905260409020610cda908484611493565b50836060015173ffffffffffffffffffffffffffffffffffffffff167fdf482aa70d52efefab20dbfaf9cc2b0cb880c75e72e26972c9c5d29c2c02f56382604051610d2791815260200190565b60405180910390a250505050565b6000610d97826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110359092919063ffffffff16565b805190915015610e415780806020019051810190610db59190611c42565b610e41576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161083c565b505050565b6000806000610e55858561104c565b90925090506000816004811115610e6e57610e6e611c64565b148015610ea657508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15610eb6576001925050506108b8565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8888604051602401610eeb929190611c93565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909416939093179092529051610f749190611cac565b600060405180830381855afa9150503d8060008114610faf576040519150601f19603f3d011682016040523d82523d6000602084013e610fb4565b606091505b5091509150818015610fc7575080516020145b8015611029575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906110059083016020908101908401611cc8565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b98975050505050505050565b606061104484846000856110bc565b949350505050565b6000808251604114156110835760208301516040840151606085015160001a61107787828585611252565b945094505050506110b5565b8251604014156110ad57602083015160408401516110a286838361136a565b9350935050506110b5565b506000905060025b9250929050565b60608247101561114e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161083c565b73ffffffffffffffffffffffffffffffffffffffff85163b6111cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161083c565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516111f59190611cac565b60006040518083038185875af1925050503d8060008114611232576040519150601f19603f3d011682016040523d82523d6000602084013e611237565b606091505b50915091506112478282866113bc565b979650505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112895750600090506003611361565b8460ff16601b141580156112a157508460ff16601c14155b156112b25750600090506004611361565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611306573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661135a57600060019250925050611361565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8316816113a060ff86901c601b611d0a565b90506113ae87828885611252565b935093505050935093915050565b606083156113cb5750816108b8565b8251156113db5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c91906115c9565b82805461141b90611b2e565b90600052602060002090601f01602090048101928261143d5760008555611483565b82601f1061145657805160ff1916838001178555611483565b82800160010185558215611483579182015b82811115611483578251825591602001919060010190611468565b5061148f929150611525565b5090565b82805461149f90611b2e565b90600052602060002090601f0160209004810192826114c15760008555611483565b82601f106114f8578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555611483565b82800160010185558215611483579182015b8281111561148357823582559160200191906001019061150a565b5b8082111561148f5760008155600101611526565b60006020828403121561154c57600080fd5b5035919050565b60005b8381101561156e578181015183820152602001611556565b838111156109605750506000910152565b60008151808452611597816020860160208601611553565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006108b8602083018461157f565b602081528151602082015260006020830151611610604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff8116606084015250606083015173ffffffffffffffffffffffffffffffffffffffff8116608084015250608083015173ffffffffffffffffffffffffffffffffffffffff811660a08401525060a083015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c083015160e083015260e08301516101008181850152808501519150506101e061012081818601526116d061020086018461157f565b92508086015190507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061014081878603018188015261170f858461157f565b94508088015192505061016081878603018188015261172e858461157f565b94508088015192505061018081878603018188015261174d858461157f565b9450808801519250506101a081878603018188015261176c858461157f565b9450808801519250506101c081878603018188015261178b858461157f565b9088015187820390920184880152935090506117a7838261157f565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff81118282101715611804576118046117b1565b60405290565b803573ffffffffffffffffffffffffffffffffffffffff8116811461182e57600080fd5b919050565b600082601f83011261184457600080fd5b813567ffffffffffffffff8082111561185f5761185f6117b1565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156118a5576118a56117b1565b816040528381528660208588010111156118be57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f8401126118f057600080fd5b50813567ffffffffffffffff81111561190857600080fd5b6020830191508360208285010111156110b557600080fd5b60008060008060006080868803121561193857600080fd5b853567ffffffffffffffff8082111561195057600080fd5b908701906101e0828a03121561196557600080fd5b61196d6117e0565b8235815261197d6020840161180a565b602082015261198e6040840161180a565b604082015261199f6060840161180a565b60608201526119b06080840161180a565b60808201526119c160a0840161180a565b60a082015260c083013560c082015260e083013560e082015261010080840135838111156119ee57600080fd5b6119fa8c828701611833565b8284015250506101208084013583811115611a1457600080fd5b611a208c828701611833565b8284015250506101408084013583811115611a3a57600080fd5b611a468c828701611833565b8284015250506101608084013583811115611a6057600080fd5b611a6c8c828701611833565b8284015250506101808084013583811115611a8657600080fd5b611a928c828701611833565b8284015250506101a08084013583811115611aac57600080fd5b611ab88c828701611833565b8284015250506101c08084013583811115611ad257600080fd5b611ade8c828701611833565b828401525050809750506020880135915080821115611afc57600080fd5b50611b09888289016118de565b90955093505060408601359150611b226060870161180a565b90509295509295909350565b600181811c90821680611b4257607f821691505b60208210811415611b7c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611be957611be9611b82565b500290565b600082611c24577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600060208284031215611c3b57600080fd5b5051919050565b600060208284031215611c5457600080fd5b815180151581146108b857600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b828152604060208201526000611044604083018461157f565b60008251611cbe818460208701611553565b9190910192915050565b600060208284031215611cda57600080fd5b81517fffffffff00000000000000000000000000000000000000000000000000000000811681146108b857600080fd5b60008219821115611d1d57611d1d611b82565b50019056fea2646970667358221220827ce78b6d511d9ebae855b4ca23a24378063f68ceacfa5c38ebdb3e1e3ac1b964736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "orders(bytes32)": {
        "params": {
          "_orderHash": "An order's hash to fetch the underlying order"
        },
        "returns": {
          "order": "The order that corresponds to the _orderHash"
        }
      }
    },
    "title": "Public order book with fees",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OrderBroadcasted(address,bytes32)": {
        "notice": "Emitted every time an order is broadcasted"
      }
    },
    "kind": "user",
    "methods": {
      "BPS()": {
        "notice": "Denominator for bps"
      },
      "limitOrderProtocol()": {
        "notice": "The limit order protocol this orderbook references"
      },
      "orders(bytes32)": {
        "notice": "Get a broadcasted order"
      },
      "signatures(bytes32)": {
        "notice": "Mapping from order hash to an Order's signature"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3608,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "signatures",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3612,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_salts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3616,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_makerAssets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3620,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_takerAssets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3624,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_makers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3628,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_receivers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3632,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_allowedSenders",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3636,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_makingAmounts",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3640,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_takingAmounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3644,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_makerAssetDatas",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3648,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_takerAssetDatas",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3652,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_getMakerAmounts",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3656,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_getTakerAmounts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3660,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_predicates",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3664,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_permits",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      },
      {
        "astId": 3668,
        "contract": "contracts/OrderBookWithFee.sol:OrderBookWithFee",
        "label": "_interactions",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}