{
  "address": "0x899E88CE78eFf248b588deeC77EF4c8cbDF6adDc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNonce",
          "type": "uint256"
        }
      ],
      "name": "NonceIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainingRaw",
          "type": "uint256"
        }
      ],
      "name": "OrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remaining",
          "type": "uint256"
        }
      ],
      "name": "OrderFilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "makingAmount",
          "type": "uint256"
        }
      ],
      "name": "OrderFilledRFQ",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIMIT_ORDER_RFQ_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIMIT_ORDER_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "amount",
          "type": "uint8"
        }
      ],
      "name": "advanceNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "and",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "arbitraryStaticCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderInfo",
          "type": "uint256"
        }
      ],
      "name": "cancelOrderRFQ",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "checkPredicate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "oracle1",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "oracle2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "spread",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "decimalsScale",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "doublePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "eq",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thresholdAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderMixin.OrderAmounts",
          "name": "orderAmounts",
          "type": "tuple"
        }
      ],
      "name": "fillOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "info",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderRFQMixin.OrderRFQ",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "makingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takingAmount",
          "type": "uint256"
        }
      ],
      "name": "fillOrderRFQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "info",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderRFQMixin.OrderRFQ",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "makingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takingAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "fillOrderRFQTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "info",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderRFQMixin.OrderRFQ",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "makingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takingAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "permit",
          "type": "bytes"
        }
      ],
      "name": "fillOrderRFQToWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thresholdAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderMixin.OrderAmounts",
          "name": "orderAmounts",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "fillOrderTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thresholdAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderMixin.OrderAmounts",
          "name": "orderAmounts",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "extraInteraction",
          "type": "bytes"
        }
      ],
      "name": "fillOrderToWithExtraInteraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "thresholdAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderMixin.OrderAmounts",
          "name": "orderAmounts",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "permit",
          "type": "bytes"
        }
      ],
      "name": "fillOrderToWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapTakerAmount",
          "type": "uint256"
        }
      ],
      "name": "getMakerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderMakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderTakerAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapMakerAmount",
          "type": "uint256"
        }
      ],
      "name": "getTakerAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "gt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "salt",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "makerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "takerAssetData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getMakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "getTakerAmount",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "predicate",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "interaction",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderMixin.Order",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "hashOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "info",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "makerAsset",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "takerAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "maker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "allowedSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "makingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "takingAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct OrderRFQMixin.OrderRFQ",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "hashOrderRFQ",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "increaseNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slot",
          "type": "uint256"
        }
      ],
      "name": "invalidatorForOrderRFQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "lt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "makerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "makerNonce",
          "type": "uint256"
        }
      ],
      "name": "nonceEquals",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "or",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "remaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        }
      ],
      "name": "remainingRaw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "orderHashes",
          "type": "bytes32[]"
        }
      ],
      "name": "remainingsRaw",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "simulateCalls",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inverseAndSpread",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "singlePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "timestampBelow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x250b8f46ae1beb1ee0bd0b84af1884671413bade580c05dd5550a7ae46c0ec9d",
  "receipt": {
    "to": null,
    "from": "0x4C828d2A58B747De3598C2Ce18a0908b0e78dC3e",
    "contractAddress": "0x899E88CE78eFf248b588deeC77EF4c8cbDF6adDc",
    "transactionIndex": 0,
    "gasUsed": "4985035",
    "logsBloom": "0x
    "blockHash": "0x1210614dd36209491d3786883a86199d3d7f41af64bfc7b1b46ed6a294d607b7",
    "transactionHash": "0x250b8f46ae1beb1ee0bd0b84af1884671413bade580c05dd5550a7ae46c0ec9d",
    "logs": [],
    "blockNumber": 10213898,
    "cumulativeGasUsed": "4985035",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "632561c5ea671b26900d2eb834bf5033",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNonce\",\"type\":\"uint256\"}],\"name\":\"NonceIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainingRaw\",\"type\":\"uint256\"}],\"name\":\"OrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"name\":\"OrderFilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"}],\"name\":\"OrderFilledRFQ\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIMIT_ORDER_RFQ_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIMIT_ORDER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"amount\",\"type\":\"uint8\"}],\"name\":\"advanceNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"and\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"arbitraryStaticCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderInfo\",\"type\":\"uint256\"}],\"name\":\"cancelOrderRFQ\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"checkPredicate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"oracle1\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"oracle2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"spread\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"decimalsScale\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doublePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"eq\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderMixin.OrderAmounts\",\"name\":\"orderAmounts\",\"type\":\"tuple\"}],\"name\":\"fillOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderRFQMixin.OrderRFQ\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"}],\"name\":\"fillOrderRFQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderRFQMixin.OrderRFQ\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"fillOrderRFQTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderRFQMixin.OrderRFQ\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"name\":\"fillOrderRFQToWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderMixin.OrderAmounts\",\"name\":\"orderAmounts\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"fillOrderTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderMixin.OrderAmounts\",\"name\":\"orderAmounts\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraInteraction\",\"type\":\"bytes\"}],\"name\":\"fillOrderToWithExtraInteraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderMixin.OrderAmounts\",\"name\":\"orderAmounts\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"name\":\"fillOrderToWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapTakerAmount\",\"type\":\"uint256\"}],\"name\":\"getMakerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderMakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderTakerAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapMakerAmount\",\"type\":\"uint256\"}],\"name\":\"getTakerAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"gt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"makerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"takerAssetData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getMakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"getTakerAmount\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"predicate\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"interaction\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderMixin.Order\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"makerAsset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"takerAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowedSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takingAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderRFQMixin.OrderRFQ\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"hashOrderRFQ\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"}],\"name\":\"invalidatorForOrderRFQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"makerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"makerNonce\",\"type\":\"uint256\"}],\"name\":\"nonceEquals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"or\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"remaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"}],\"name\":\"remainingRaw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"orderHashes\",\"type\":\"bytes32[]\"}],\"name\":\"remainingsRaw\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"simulateCalls\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inverseAndSpread\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"singlePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"timestampBelow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"and(address[],bytes[])\":{\"returns\":{\"_0\":\"Result True if calls to all targets returned True. Otherwise, false\"}},\"arbitraryStaticCall(address,bytes)\":{\"returns\":{\"_0\":\"Result Bytes transmuted to uint256\"}},\"doublePrice(address,address,uint256,int256,uint256)\":{\"returns\":{\"_0\":\"Result Token A relative price times amount\"}},\"eq(uint256,address,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns the same value as `value`. Otherwise, false\"}},\"fillOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256))\":{\"params\":{\"order\":\"Order quote to fill\",\"orderAmounts\":\"Amounts to fill\",\"signature\":\"Signature to confirm quote ownership\"}},\"fillOrderRFQ((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)\":{\"params\":{\"makingAmount\":\"Making amount\",\"order\":\"Order quote to fill\",\"signature\":\"Signature to confirm quote ownership\",\"takingAmount\":\"Taking amount\"}},\"fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address)\":{\"params\":{\"makingAmount\":\"Making amount\",\"order\":\"Order quote to fill\",\"signature\":\"Signature to confirm quote ownership\",\"takingAmount\":\"Taking amount\",\"target\":\"Address that will receive swap funds\"}},\"fillOrderRFQToWithPermit((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address,bytes)\":{\"details\":\"See tests for examples\",\"params\":{\"makingAmount\":\"Making amount\",\"order\":\"Order quote to fill\",\"permit\":\"Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.\",\"signature\":\"Signature to confirm quote ownership\",\"takingAmount\":\"Taking amount\",\"target\":\"Address that will receive swap funds\"}},\"fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address)\":{\"params\":{\"order\":\"Order quote to fill\",\"orderAmounts\":\"Amounts to fill\",\"signature\":\"Signature to confirm quote ownership\",\"target\":\"Address that will receive swap funds\"}},\"fillOrderToWithExtraInteraction((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address,bytes)\":{\"params\":{\"extraInteraction\":\"Optional interaction. If present, is triggered between asset transfers\",\"order\":\"Order quote to fill\",\"orderAmounts\":\"Amounts to fill\",\"signature\":\"Signature to confirm quote ownership\",\"target\":\"Address that will receive swap funds\"}},\"fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address,bytes)\":{\"details\":\"See tests for examples\",\"params\":{\"order\":\"Order quote to fill\",\"orderAmounts\":\"Amounts to fill\",\"permit\":\"Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.\",\"signature\":\"Signature to confirm quote ownership\",\"target\":\"Address that will receive swap funds\"}},\"getMakerAmount(uint256,uint256,uint256)\":{\"returns\":{\"_0\":\"Result Floored maker amount\"}},\"getTakerAmount(uint256,uint256,uint256)\":{\"returns\":{\"_0\":\"Result Ceiled taker amount\"}},\"gt(uint256,address,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is bigger than `value`. Otherwise, false\"}},\"invalidatorForOrderRFQ(address,uint256)\":{\"returns\":{\"_0\":\"Result Each bit represents whether corresponding was already invalidated\"}},\"lt(uint256,address,bytes)\":{\"params\":{\"value\":\"Value to test\"},\"returns\":{\"_0\":\"Result True if call to target returns value which is lower than `value`. Otherwise, false\"}},\"nonceEquals(address,uint256)\":{\"returns\":{\"_0\":\"Result True if `makerAddress` has specified nonce. Otherwise, false\"}},\"or(address[],bytes[])\":{\"returns\":{\"_0\":\"Result True if call to any target returned True. Otherwise, false\"}},\"remainingRaw(bytes32)\":{\"returns\":{\"_0\":\"Result Unfilled amount of order plus one if order exists. Otherwise 0\"}},\"simulateCalls(address[],bytes[])\":{\"params\":{\"data\":\"Array of data that will be passed to each call\",\"targets\":\"Array of addresses that will be called\"}},\"singlePrice(address,uint256,uint256)\":{\"params\":{\"inverseAndSpread\":\"concatenated inverse flag and spread. Lowest 254 bits specify spread amount. Spread is scaled by 1e9, i.e. 101% = 1.01e9, 99% = 0.99e9. Highest bit is set when oracle price should be inverted, e.g. for DAI-ETH oracle, inverse=false means that we request DAI price in ETH and inverse=true means that we request ETH price in DAI\"},\"returns\":{\"_0\":\"Amount * spread * oracle price\"}},\"timestampBelow(uint256)\":{\"returns\":{\"_0\":\"Result True if current block timestamp is lower than `time`. Otherwise, false\"}}},\"title\":\"Ubeswap Limit Order Protocol v2\",\"version\":1},\"userdoc\":{\"events\":{\"OrderCanceled(address,bytes32,uint256)\":{\"notice\":\"Emitted when order gets cancelled\"},\"OrderFilled(address,bytes32,uint256)\":{\"notice\":\"Emitted every time order gets filled, including partial fills\"},\"OrderFilledRFQ(bytes32,uint256)\":{\"notice\":\"Emitted when RFQ gets filled\"}},\"kind\":\"user\",\"methods\":{\"advanceNonce(uint8)\":{\"notice\":\"Advances nonce by specified amount\"},\"and(address[],bytes[])\":{\"notice\":\"Calls every target with corresponding data\"},\"arbitraryStaticCall(address,bytes)\":{\"notice\":\"Performs an arbitrary call to target with data\"},\"cancelOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes))\":{\"notice\":\"Cancels order by setting remaining amount to zero\"},\"cancelOrderRFQ(uint256)\":{\"notice\":\"Cancels order's quote\"},\"checkPredicate((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes))\":{\"notice\":\"Checks order predicate\"},\"doublePrice(address,address,uint256,int256,uint256)\":{\"notice\":\"Calculates price of token A relative to token B. Note that order is important\"},\"eq(uint256,address,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's equal to the value\"},\"fillOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256))\":{\"notice\":\"Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData\"},\"fillOrderRFQ((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)\":{\"notice\":\"Fills order's quote, fully or partially (whichever is possible)\"},\"fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address)\":{\"notice\":\"Same as `fillOrderRFQ` but allows to specify funds destination instead of `msg.sender`\"},\"fillOrderRFQToWithPermit((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address,bytes)\":{\"notice\":\"Fills Same as `fillOrderRFQ` but calls permit first, allowing to approve token spending and make a swap in one transaction. Also allows to specify funds destination instead of `msg.sender`\"},\"fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address)\":{\"notice\":\"Same as `fillOrder` but allows to specify funds destination instead of `msg.sender`\"},\"fillOrderToWithExtraInteraction((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address,bytes)\":{\"notice\":\"Same as `fillOrderTo` but allows for additional interaction between asset transfers\"},\"fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address,bytes)\":{\"notice\":\"Same as `fillOrder` but calls permit first, allowing to approve token spending and make a swap in one transaction. Also allows to specify funds destination instead of `msg.sender`\"},\"getMakerAmount(uint256,uint256,uint256)\":{\"notice\":\"Calculates maker amount\"},\"getTakerAmount(uint256,uint256,uint256)\":{\"notice\":\"Calculates taker amount\"},\"gt(uint256,address,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's bigger than value\"},\"increaseNonce()\":{\"notice\":\"Advances nonce by one\"},\"invalidatorForOrderRFQ(address,uint256)\":{\"notice\":\"Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\"},\"lt(uint256,address,bytes)\":{\"notice\":\"Calls target with specified data and tests if it's lower than value\"},\"nonceEquals(address,uint256)\":{\"notice\":\"Checks if `makerAddress` has specified `makerNonce`\"},\"or(address[],bytes[])\":{\"notice\":\"Calls every target with corresponding data\"},\"remaining(bytes32)\":{\"notice\":\"Returns unfilled amount for order. Throws if order does not exist\"},\"remainingRaw(bytes32)\":{\"notice\":\"Returns unfilled amount for order\"},\"remainingsRaw(bytes32[])\":{\"notice\":\"Same as `remainingRaw` but for multiple orders\"},\"simulateCalls(address[],bytes[])\":{\"notice\":\"Calls every target with corresponding data. Then reverts with CALL_RESULTS_0101011 where zeroes and ones denote failure or success of the corresponding call\"},\"singlePrice(address,uint256,uint256)\":{\"notice\":\"Calculates price of token relative to oracle unit (ETH or USD)\"},\"timestampBelow(uint256)\":{\"notice\":\"Checks passed time against block timestamp\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LimitOrderProtocol.sol\":\"LimitOrderProtocol\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../Address.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        if (error == ECDSA.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xc8add71d80d05a1390e1c656686a0ea10ffaebfcc433cc397a63fd725f376b7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/LimitOrderProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"./OrderMixin.sol\\\";\\nimport \\\"./OrderRFQMixin.sol\\\";\\n\\n/// @title Ubeswap Limit Order Protocol v2\\ncontract LimitOrderProtocol is\\n    EIP712(\\\"Ubeswap Limit Order Protocol\\\", \\\"2\\\"),\\n    OrderMixin,\\n    OrderRFQMixin\\n{\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns(bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\",\"keccak256\":\"0xfa5a18fef29b7989d14a12bed26c45e5418954cf7041cc1cafbe3b10292fb26a\",\"license\":\"MIT\"},\"contracts/OrderMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./helpers/AmountCalculator.sol\\\";\\nimport \\\"./helpers/ChainlinkCalculator.sol\\\";\\nimport \\\"./helpers/NonceManager.sol\\\";\\nimport \\\"./helpers/PredicateHelper.sol\\\";\\nimport \\\"./interfaces/InteractiveNotificationReceiver.sol\\\";\\nimport \\\"./libraries/ArgumentsDecoder.sol\\\";\\nimport \\\"./libraries/Permitable.sol\\\";\\n\\n/// @title Regular Limit Order mixin\\nabstract contract OrderMixin is\\n    EIP712,\\n    AmountCalculator,\\n    ChainlinkCalculator,\\n    NonceManager,\\n    PredicateHelper,\\n    Permitable\\n{\\n    using Address for address;\\n    using ArgumentsDecoder for bytes;\\n\\n    /// @notice Emitted every time order gets filled, including partial fills\\n    event OrderFilled(\\n        address indexed maker,\\n        bytes32 orderHash,\\n        uint256 remaining\\n    );\\n\\n    /// @notice Emitted when order gets cancelled\\n    event OrderCanceled(\\n        address indexed maker,\\n        bytes32 orderHash,\\n        uint256 remainingRaw\\n    );\\n\\n    // Fixed-size order part with core information\\n    struct StaticOrder {\\n        uint256 salt;\\n        address makerAsset;\\n        address takerAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n    }\\n\\n    // `StaticOrder` extension including variable-sized additional order meta information\\n    struct Order {\\n        uint256 salt;\\n        address makerAsset;\\n        address takerAsset;\\n        address maker;\\n        address receiver;\\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n        bytes makerAssetData;\\n        bytes takerAssetData;\\n        bytes getMakerAmount; // this.staticcall(abi.encodePacked(bytes, swapTakerAmount)) => (swapMakerAmount)\\n        bytes getTakerAmount; // this.staticcall(abi.encodePacked(bytes, swapMakerAmount)) => (swapTakerAmount)\\n        bytes predicate;      // this.staticcall(bytes) => (bool)\\n        bytes permit;         // On first fill: permit.1.call(abi.encodePacked(permit.selector, permit.2))\\n        bytes interaction;\\n    }\\n\\n    // Amounts used when filling an order\\n    struct OrderAmounts {\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n        uint256 thresholdAmount; // Specifies maximum allowed takingAmount when takingAmount is zero, otherwise specifies minimum allowed makingAmount\\n    }\\n\\n    bytes32 constant public LIMIT_ORDER_TYPEHASH = keccak256(\\n        \\\"Order(uint256 salt,address makerAsset,address takerAsset,address maker,address receiver,address allowedSender,uint256 makingAmount,uint256 takingAmount,bytes makerAssetData,bytes takerAssetData,bytes getMakerAmount,bytes getTakerAmount,bytes predicate,bytes permit,bytes interaction)\\\"\\n    );\\n    uint256 constant private _ORDER_DOES_NOT_EXIST = 0;\\n    uint256 constant private _ORDER_FILLED = 1;\\n\\n    /// @notice Stores unfilled amounts for each order plus one.\\n    /// Therefore 0 means order doesn't exist and 1 means order was filled\\n    mapping(bytes32 => uint256) private _remaining;\\n\\n    /// @notice Returns unfilled amount for order. Throws if order does not exist\\n    function remaining(bytes32 orderHash) external view returns(uint256) {\\n        uint256 amount = _remaining[orderHash];\\n        require(amount != _ORDER_DOES_NOT_EXIST, \\\"LOP: Unknown order\\\");\\n        unchecked { amount -= 1; }\\n        return amount;\\n    }\\n\\n    /// @notice Returns unfilled amount for order\\n    /// @return Result Unfilled amount of order plus one if order exists. Otherwise 0\\n    function remainingRaw(bytes32 orderHash) external view returns(uint256) {\\n        return _remaining[orderHash];\\n    }\\n\\n    /// @notice Same as `remainingRaw` but for multiple orders\\n    function remainingsRaw(bytes32[] memory orderHashes) external view returns(uint256[] memory) {\\n        uint256[] memory results = new uint256[](orderHashes.length);\\n        for (uint256 i = 0; i < orderHashes.length; i++) {\\n            results[i] = _remaining[orderHashes[i]];\\n        }\\n        return results;\\n    }\\n\\n    /**\\n     * @notice Calls every target with corresponding data. Then reverts with CALL_RESULTS_0101011 where zeroes and ones\\n     * denote failure or success of the corresponding call\\n     * @param targets Array of addresses that will be called\\n     * @param data Array of data that will be passed to each call\\n     */\\n    function simulateCalls(address[] calldata targets, bytes[] calldata data) external {\\n        require(targets.length == data.length, \\\"LOP: array size mismatch\\\");\\n        bytes memory reason = new bytes(targets.length);\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool success, bytes memory result) = targets[i].call(data[i]);\\n            if (success && result.length > 0) {\\n                success = result.length == 32 && result.decodeBool();\\n            }\\n            reason[i] = success ? bytes1(\\\"1\\\") : bytes1(\\\"0\\\");\\n        }\\n\\n        // Always revert and provide per call results\\n        revert(string(abi.encodePacked(\\\"CALL_RESULTS_\\\", reason)));\\n    }\\n\\n    /// @notice Cancels order by setting remaining amount to zero\\n    function cancelOrder(Order memory order) external {\\n        require(order.maker == msg.sender, \\\"LOP: Access denied\\\");\\n\\n        bytes32 orderHash = hashOrder(order);\\n        uint256 orderRemaining = _remaining[orderHash];\\n        require(orderRemaining != _ORDER_FILLED, \\\"LOP: already filled\\\");\\n        emit OrderCanceled(msg.sender, orderHash, orderRemaining);\\n        _remaining[orderHash] = _ORDER_FILLED;\\n    }\\n\\n    /// @notice Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param orderAmounts Amounts to fill\\n    function fillOrder(\\n        Order memory order,\\n        bytes calldata signature,\\n        OrderAmounts calldata orderAmounts\\n    ) external returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\\n        return _fillOrderTo(order, signature, orderAmounts, msg.sender, new bytes(0));\\n    }\\n\\n    /// @notice Same as `fillOrder` but calls permit first,\\n    /// allowing to approve token spending and make a swap in one transaction.\\n    /// Also allows to specify funds destination instead of `msg.sender`\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param orderAmounts Amounts to fill\\n    /// @param target Address that will receive swap funds\\n    /// @param permit Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.\\n    /// @dev See tests for examples\\n    function fillOrderToWithPermit(\\n        Order memory order,\\n        bytes calldata signature,\\n        OrderAmounts calldata orderAmounts,\\n        address target,\\n        bytes calldata permit\\n    ) external returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\\n        require(permit.length >= 20, \\\"LOP: permit length too low\\\");\\n        (address token, bytes calldata permitData) = permit.decodeTargetAndData();\\n        _permit(token, permitData);\\n        return _fillOrderTo(order, signature, orderAmounts, target, new bytes(0));\\n    }\\n\\n    /// @notice Same as `fillOrder` but allows to specify funds destination instead of `msg.sender`\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param orderAmounts Amounts to fill\\n    /// @param target Address that will receive swap funds\\n    function fillOrderTo(\\n        Order memory order,\\n        bytes calldata signature,\\n        OrderAmounts calldata orderAmounts,\\n        address target\\n    ) public returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\\n        return _fillOrderTo(\\n            order,\\n            signature,\\n            orderAmounts,\\n            target,\\n            new bytes(0)\\n        );\\n    }\\n\\n    /// @notice Same as `fillOrderTo` but allows for additional interaction between asset transfers\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param orderAmounts Amounts to fill\\n    /// @param target Address that will receive swap funds\\n    /// @param extraInteraction Optional interaction. If present, is triggered between asset transfers\\n    function fillOrderToWithExtraInteraction(\\n        Order memory order,\\n        bytes calldata signature,\\n        OrderAmounts calldata orderAmounts,\\n        address target,\\n        bytes calldata extraInteraction\\n    ) public returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\\n        return _fillOrderTo(\\n            order,\\n            signature,\\n            orderAmounts,\\n            target,\\n            extraInteraction\\n        );\\n    }\\n\\n    /// @notice Base implementation for order filling\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param orderAmounts Amounts to fill\\n    /// @param target Address that will receive swap funds\\n    /// @param extraInteraction Optional interaction. If present, is triggered between asset transfers\\n    function _fillOrderTo(\\n        Order memory order,\\n        bytes calldata signature,\\n        OrderAmounts memory orderAmounts,\\n        address target,\\n        bytes memory extraInteraction\\n    ) internal returns(uint256 /* actualMakingAmount */, uint256 /* actualTakingAmount */) {\\n        require(target != address(0), \\\"LOP: zero target is forbidden\\\");\\n        bytes32 orderHash = hashOrder(order);\\n\\n        {  // Stack too deep\\n            uint256 remainingMakerAmount = _remaining[orderHash];\\n            require(remainingMakerAmount != _ORDER_FILLED, \\\"LOP: remaining amount is 0\\\");\\n            require(order.allowedSender == address(0) || order.allowedSender == msg.sender, \\\"LOP: private order\\\");\\n            if (remainingMakerAmount == _ORDER_DOES_NOT_EXIST) {\\n                // First fill: validate order and permit maker asset\\n                require(SignatureChecker.isValidSignatureNow(order.maker, orderHash, signature), \\\"LOP: bad signature\\\");\\n                remainingMakerAmount = order.makingAmount;\\n                if (order.permit.length >= 20) {\\n                    // proceed only if permit length is enough to store address\\n                    (address token, bytes memory permit) = order.permit.decodeTargetAndCalldata();\\n                    _permitMemory(token, permit);\\n                    require(_remaining[orderHash] == _ORDER_DOES_NOT_EXIST, \\\"LOP: reentrancy detected\\\");\\n                }\\n            } else {\\n                unchecked { remainingMakerAmount -= 1; }\\n            }\\n\\n            // Check if order is valid\\n            if (order.predicate.length > 0) {\\n                require(checkPredicate(order), \\\"LOP: predicate returned false\\\");\\n            }\\n\\n            // Compute maker and taker assets amount\\n            if ((orderAmounts.takingAmount == 0) == (orderAmounts.makingAmount == 0)) {\\n                revert(\\\"LOP: only one amount should be 0\\\");\\n            } else if (orderAmounts.takingAmount == 0) {\\n                uint256 requestedMakingAmount = orderAmounts.makingAmount;\\n                if (orderAmounts.makingAmount > remainingMakerAmount) {\\n                    orderAmounts.makingAmount = remainingMakerAmount;\\n                }\\n                orderAmounts.takingAmount = _callGetter(order.getTakerAmount, order.makingAmount, orderAmounts.makingAmount, order.takingAmount);\\n                // check that actual rate is not worse than what was expected\\n                // orderAmounts.takingAmount / orderAmounts.makingAmount <= orderAmounts.thresholdAmount / requestedMakingAmount\\n                require(orderAmounts.takingAmount * requestedMakingAmount <= orderAmounts.thresholdAmount * orderAmounts.makingAmount, \\\"LOP: taking amount too high\\\");\\n            } else {\\n                uint256 requestedTakingAmount = orderAmounts.takingAmount;\\n                orderAmounts.makingAmount = _callGetter(order.getMakerAmount, order.takingAmount, orderAmounts.takingAmount, order.makingAmount);\\n                if (orderAmounts.makingAmount > remainingMakerAmount) {\\n                    orderAmounts.makingAmount = remainingMakerAmount;\\n                    orderAmounts.takingAmount = _callGetter(order.getTakerAmount, order.makingAmount, orderAmounts.makingAmount, order.takingAmount);\\n                }\\n                // check that actual rate is not worse than what was expected\\n                // orderAmounts.makingAmount / orderAmounts.takingAmount >= orderAmounts.thresholdAmount / requestedTakingAmount\\n                require(orderAmounts.makingAmount * requestedTakingAmount >= orderAmounts.thresholdAmount * orderAmounts.takingAmount, \\\"LOP: making amount too low\\\");\\n            }\\n\\n            require(orderAmounts.makingAmount > 0 && orderAmounts.takingAmount > 0, \\\"LOP: can't swap 0 amount\\\");\\n\\n            // Update remaining amount in storage\\n            unchecked {\\n                remainingMakerAmount = remainingMakerAmount - orderAmounts.makingAmount;\\n                _remaining[orderHash] = remainingMakerAmount + 1;\\n            }\\n            emit OrderFilled(msg.sender, orderHash, remainingMakerAmount);\\n        }\\n\\n        // Maker => Taker\\n        _makeCall(\\n            order.makerAsset,\\n            abi.encodePacked(\\n                IERC20.transferFrom.selector,\\n                uint256(uint160(order.maker)),\\n                uint256(uint160(target)),\\n                orderAmounts.makingAmount,\\n                order.makerAssetData\\n            )\\n        );\\n\\n        // Handle external extraInteraction\\n        if (extraInteraction.length >= 20) {\\n            // proceed only if interaction length is enough to store address\\n            (address interactionTarget, bytes memory interactionData) = extraInteraction.decodeTargetAndCalldata();\\n            InteractiveNotificationReceiver(interactionTarget).notifyFillOrder(\\n                msg.sender, order.makerAsset, order.takerAsset, orderAmounts.makingAmount, orderAmounts.takingAmount, interactionData\\n            );\\n        }\\n        \\n        // Taker => Maker\\n        _makeCall(\\n            order.takerAsset,\\n            abi.encodePacked(\\n                IERC20.transferFrom.selector,\\n                uint256(uint160(msg.sender)),\\n                uint256(uint160(order.receiver == address(0) ? order.maker : order.receiver)),\\n                orderAmounts.takingAmount,\\n                order.takerAssetData\\n            )\\n        );\\n\\n        // Maker can handle funds interactively\\n        if (order.interaction.length >= 20) {\\n            // proceed only if interaction length is enough to store address\\n            (address interactionTarget, bytes memory interactionData) = order.interaction.decodeTargetAndCalldata();\\n            InteractiveNotificationReceiver(interactionTarget).notifyFillOrder(\\n                msg.sender, order.makerAsset, order.takerAsset, orderAmounts.makingAmount, orderAmounts.takingAmount, interactionData\\n            );\\n        }\\n\\n        return (orderAmounts.makingAmount, orderAmounts.takingAmount);\\n    }\\n\\n    /// @notice Checks order predicate\\n    function checkPredicate(Order memory order) public view returns(bool) {\\n        bytes memory result = address(this).functionStaticCall(order.predicate, \\\"LOP: predicate call failed\\\");\\n        require(result.length == 32, \\\"LOP: invalid predicate return\\\");\\n        return result.decodeBool();\\n    }\\n\\n    function hashOrder(Order memory order) public view returns(bytes32) {\\n        StaticOrder memory staticOrder;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            staticOrder := order\\n        }\\n        return _hashTypedDataV4(\\n            keccak256(\\n                abi.encode(\\n                    LIMIT_ORDER_TYPEHASH,\\n                    staticOrder,\\n                    keccak256(order.makerAssetData),\\n                    keccak256(order.takerAssetData),\\n                    keccak256(order.getMakerAmount),\\n                    keccak256(order.getTakerAmount),\\n                    keccak256(order.predicate),\\n                    keccak256(order.permit),\\n                    keccak256(order.interaction)\\n                )\\n            )\\n        );\\n    }\\n\\n    function _makeCall(address asset, bytes memory assetData) private {\\n        bytes memory result = asset.functionCall(assetData, \\\"LOP: asset.call failed\\\");\\n        if (result.length > 0) {\\n            require(result.length == 32 && result.decodeBool(), \\\"LOP: asset.call bad result\\\");\\n        }\\n    }\\n\\n    function _callGetter(bytes memory getter, uint256 orderExpectedAmount, uint256 amount, uint256 orderResultAmount) private view returns(uint256) {\\n        if (getter.length == 0) {\\n            // On empty getter calldata only exact amount is allowed\\n            require(amount == orderExpectedAmount, \\\"LOP: wrong amount\\\");\\n            return orderResultAmount;\\n        } else {\\n            bytes memory result = address(this).functionStaticCall(abi.encodePacked(getter, amount), \\\"LOP: getAmount call failed\\\");\\n            require(result.length == 32, \\\"LOP: invalid getAmount return\\\");\\n            return result.decodeUint256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfff3a2e7fca71927a6513ce25cc8c30af6aba8fb71b91e960ee11432563afd42\",\"license\":\"MIT\"},\"contracts/OrderRFQMixin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./helpers/AmountCalculator.sol\\\";\\nimport \\\"./libraries/Permitable.sol\\\";\\n\\n/// @title RFQ Limit Order mixin\\nabstract contract OrderRFQMixin is EIP712, AmountCalculator, Permitable {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Emitted when RFQ gets filled\\n    event OrderFilledRFQ(\\n        bytes32 orderHash,\\n        uint256 makingAmount\\n    );\\n\\n    struct OrderRFQ {\\n        uint256 info;  // lowest 64 bits is the order id, next 64 bits is the expiration timestamp\\n        IERC20 makerAsset;\\n        IERC20 takerAsset;\\n        address maker;\\n        address allowedSender;  // equals to Zero address on public orders\\n        uint256 makingAmount;\\n        uint256 takingAmount;\\n    }\\n\\n    bytes32 constant public LIMIT_ORDER_RFQ_TYPEHASH = keccak256(\\n        \\\"OrderRFQ(uint256 info,address makerAsset,address takerAsset,address maker,address allowedSender,uint256 makingAmount,uint256 takingAmount)\\\"\\n    );\\n\\n    mapping(address => mapping(uint256 => uint256)) private _invalidator;\\n\\n    /// @notice Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes\\n    /// @return Result Each bit represents whether corresponding was already invalidated\\n    function invalidatorForOrderRFQ(address maker, uint256 slot) external view returns(uint256) {\\n        return _invalidator[maker][slot];\\n    }\\n\\n    /// @notice Cancels order's quote\\n    function cancelOrderRFQ(uint256 orderInfo) external {\\n        _invalidateOrder(msg.sender, orderInfo);\\n    }\\n\\n    /// @notice Fills order's quote, fully or partially (whichever is possible)\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param makingAmount Making amount\\n    /// @param takingAmount Taking amount\\n    function fillOrderRFQ(\\n        OrderRFQ memory order,\\n        bytes calldata signature,\\n        uint256 makingAmount,\\n        uint256 takingAmount\\n    ) external returns(uint256, uint256) {\\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, msg.sender);\\n    }\\n\\n    /// @notice Fills Same as `fillOrderRFQ` but calls permit first,\\n    /// allowing to approve token spending and make a swap in one transaction.\\n    /// Also allows to specify funds destination instead of `msg.sender`\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param makingAmount Making amount\\n    /// @param takingAmount Taking amount\\n    /// @param target Address that will receive swap funds\\n    /// @param permit Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.\\n    /// @dev See tests for examples\\n    function fillOrderRFQToWithPermit(\\n        OrderRFQ memory order,\\n        bytes calldata signature,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        address target,\\n        bytes calldata permit\\n    ) external returns(uint256, uint256) {\\n        _permit(address(order.takerAsset), permit);\\n        return fillOrderRFQTo(order, signature, makingAmount, takingAmount, target);\\n    }\\n\\n    /// @notice Same as `fillOrderRFQ` but allows to specify funds destination instead of `msg.sender`\\n    /// @param order Order quote to fill\\n    /// @param signature Signature to confirm quote ownership\\n    /// @param makingAmount Making amount\\n    /// @param takingAmount Taking amount\\n    /// @param target Address that will receive swap funds\\n    function fillOrderRFQTo(\\n        OrderRFQ memory order,\\n        bytes calldata signature,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        address target\\n    ) public returns(uint256, uint256) {\\n        require(target != address(0), \\\"LOP: zero target is forbidden\\\");\\n\\n        address maker = order.maker;\\n\\n        // Validate order\\n        require(order.allowedSender == address(0) || order.allowedSender == msg.sender, \\\"LOP: private order\\\");\\n        bytes32 orderHash = hashOrderRFQ(order);\\n        require(SignatureChecker.isValidSignatureNow(maker, orderHash, signature), \\\"LOP: bad signature\\\");\\n\\n        {  // Stack too deep\\n            uint256 info = order.info;\\n            // Check time expiration\\n            uint256 expiration = uint128(info) >> 64;\\n            require(expiration == 0 || block.timestamp <= expiration, \\\"LOP: order expired\\\");  // solhint-disable-line not-rely-on-time\\n            _invalidateOrder(maker, info);\\n        }\\n\\n        {  // stack too deep\\n            uint256 orderMakingAmount = order.makingAmount;\\n            uint256 orderTakingAmount = order.takingAmount;\\n            // Compute partial fill if needed\\n            if (takingAmount == 0 && makingAmount == 0) {\\n                // Two zeros means whole order\\n                makingAmount = orderMakingAmount;\\n                takingAmount = orderTakingAmount;\\n            }\\n            else if (takingAmount == 0) {\\n                require(makingAmount <= orderMakingAmount, \\\"LOP: making amount exceeded\\\");\\n                takingAmount = getTakerAmount(orderMakingAmount, orderTakingAmount, makingAmount);\\n            }\\n            else if (makingAmount == 0) {\\n                require(takingAmount <= orderTakingAmount, \\\"LOP: taking amount exceeded\\\");\\n                makingAmount = getMakerAmount(orderMakingAmount, orderTakingAmount, takingAmount);\\n            }\\n            else {\\n                revert(\\\"LOP: both amounts are non-zero\\\");\\n            }\\n        }\\n\\n        require(makingAmount > 0 && takingAmount > 0, \\\"LOP: can't swap 0 amount\\\");\\n\\n        // Maker => Taker, Taker => Maker\\n        order.makerAsset.safeTransferFrom(maker, target, makingAmount);\\n        order.takerAsset.safeTransferFrom(msg.sender, maker, takingAmount);\\n\\n        emit OrderFilledRFQ(orderHash, makingAmount);\\n        return (makingAmount, takingAmount);\\n    }\\n\\n    function hashOrderRFQ(OrderRFQ memory order) public view returns(bytes32) {\\n        return _hashTypedDataV4(keccak256(abi.encode(LIMIT_ORDER_RFQ_TYPEHASH, order)));\\n    }\\n\\n    function _invalidateOrder(address maker, uint256 orderInfo) private {\\n        uint256 invalidatorSlot = uint64(orderInfo) >> 8;\\n        uint256 invalidatorBit = 1 << uint8(orderInfo);\\n        mapping(uint256 => uint256) storage invalidatorStorage = _invalidator[maker];\\n        uint256 invalidator = invalidatorStorage[invalidatorSlot];\\n        require(invalidator & invalidatorBit == 0, \\\"LOP: invalidated order\\\");\\n        invalidatorStorage[invalidatorSlot] = invalidator | invalidatorBit;\\n    }\\n}\\n\",\"keccak256\":\"0xe18399b1443a3d7aefd8f831c4d062b8227e60d0a870b206d17906673ff50b7d\",\"license\":\"MIT\"},\"contracts/helpers/AmountCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title A helper contract for calculations related to order amounts\\ncontract AmountCalculator {\\n    using Address for address;\\n\\n    /// @notice Calculates maker amount\\n    /// @return Result Floored maker amount\\n    function getMakerAmount(uint256 orderMakerAmount, uint256 orderTakerAmount, uint256 swapTakerAmount) public pure returns(uint256) {\\n        return swapTakerAmount * orderMakerAmount / orderTakerAmount;\\n    }\\n\\n    /// @notice Calculates taker amount\\n    /// @return Result Ceiled taker amount\\n    function getTakerAmount(uint256 orderMakerAmount, uint256 orderTakerAmount, uint256 swapMakerAmount) public pure returns(uint256) {\\n        return (swapMakerAmount * orderTakerAmount + orderMakerAmount - 1) / orderMakerAmount;\\n    }\\n\\n    /// @notice Performs an arbitrary call to target with data\\n    /// @return Result Bytes transmuted to uint256\\n    function arbitraryStaticCall(address target, bytes memory data) external view returns(uint256) {\\n        (bytes memory result) = target.functionStaticCall(data, \\\"AC: arbitraryStaticCall\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n}\\n\",\"keccak256\":\"0xc860f84f7f31c0f1d888a1c9ad442c60a3bb0e2a6c3879142c89dabb9e6631d8\",\"license\":\"MIT\"},\"contracts/helpers/ChainlinkCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n\\n/// @title A helper contract for interactions with https://docs.chain.link\\ncontract ChainlinkCalculator {\\n    using SafeCast for int256;\\n\\n    uint256 private constant _SPREAD_DENOMINATOR = 1e9;\\n    uint256 private constant _INVERSE_MASK = 1 << 255;\\n\\n    /// @notice Calculates price of token relative to oracle unit (ETH or USD)\\n    /// @param inverseAndSpread concatenated inverse flag and spread.\\n    /// Lowest 254 bits specify spread amount. Spread is scaled by 1e9, i.e. 101% = 1.01e9, 99% = 0.99e9.\\n    /// Highest bit is set when oracle price should be inverted,\\n    /// e.g. for DAI-ETH oracle, inverse=false means that we request DAI price in ETH\\n    /// and inverse=true means that we request ETH price in DAI\\n    /// @return Amount * spread * oracle price\\n    function singlePrice(AggregatorV3Interface oracle, uint256 inverseAndSpread, uint256 amount) external view returns(uint256) {\\n        (, int256 latestAnswer,,,) = oracle.latestRoundData();\\n        bool inverse = inverseAndSpread & _INVERSE_MASK > 0;\\n        uint256 spread = inverseAndSpread & (~_INVERSE_MASK);\\n        if (inverse) {\\n            return amount * spread * (10 ** oracle.decimals()) / latestAnswer.toUint256() / _SPREAD_DENOMINATOR;\\n        } else {\\n            return amount * spread * latestAnswer.toUint256() / (10 ** oracle.decimals()) / _SPREAD_DENOMINATOR;\\n        }\\n    }\\n\\n    /// @notice Calculates price of token A relative to token B. Note that order is important\\n    /// @return Result Token A relative price times amount\\n    function doublePrice(AggregatorV3Interface oracle1, AggregatorV3Interface oracle2, uint256 spread, int256 decimalsScale, uint256 amount) external view returns(uint256) {\\n        require(oracle1.decimals() == oracle2.decimals(), \\\"CC: oracle decimals don't match\\\");\\n        (, int256 latestAnswer1,,,) = oracle1.latestRoundData();\\n        (, int256 latestAnswer2,,,) = oracle2.latestRoundData();\\n        if (decimalsScale > 0) {\\n            return amount * spread * latestAnswer1.toUint256() * (10 ** decimalsScale.toUint256()) / latestAnswer2.toUint256() / _SPREAD_DENOMINATOR;\\n        } else if (decimalsScale < 0) {\\n            return amount * spread * latestAnswer1.toUint256() / latestAnswer2.toUint256() / _SPREAD_DENOMINATOR / (10 ** (-decimalsScale).toUint256());\\n        } else {\\n            return amount * spread * latestAnswer1.toUint256() / latestAnswer2.toUint256() / _SPREAD_DENOMINATOR;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe6ef9c685637811fe77e65950422756d59e77da2bdd19b54992545e21d1f9f4c\",\"license\":\"MIT\"},\"contracts/helpers/NonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title A helper contract for managing nonce of tx sender\\ncontract NonceManager {\\n    event NonceIncreased(address indexed maker, uint256 newNonce);\\n\\n    mapping(address => uint256) public nonce;\\n\\n    /// @notice Advances nonce by one\\n    function increaseNonce() external {\\n        advanceNonce(1);\\n    }\\n\\n    /// @notice Advances nonce by specified amount\\n    function advanceNonce(uint8 amount) public {\\n        uint256 newNonce = nonce[msg.sender] + amount;\\n        nonce[msg.sender] = newNonce;\\n        emit NonceIncreased(msg.sender, newNonce);\\n    }\\n\\n    /// @notice Checks if `makerAddress` has specified `makerNonce`\\n    /// @return Result True if `makerAddress` has specified nonce. Otherwise, false\\n    function nonceEquals(address makerAddress, uint256 makerNonce) external view returns(bool) {\\n        return nonce[makerAddress] == makerNonce;\\n    }\\n}\\n\",\"keccak256\":\"0xc4720b50987da0e870d18fe171a8d370d32ed14fb23c90d3024f864290f4410a\",\"license\":\"MIT\"},\"contracts/helpers/PredicateHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n\\n/// @title A helper contract for executing boolean functions on arbitrary target call results\\ncontract PredicateHelper {\\n    using Address for address;\\n\\n    /// @notice Calls every target with corresponding data\\n    /// @return Result True if call to any target returned True. Otherwise, false\\n    function or(address[] calldata targets, bytes[] calldata data) external view returns(bool) {\\n        require(targets.length == data.length, \\\"PH: input array size mismatch\\\");\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            bytes memory result = targets[i].functionStaticCall(data[i], \\\"PH: 'or' subcall failed\\\");\\n            require(result.length == 32, \\\"PH: invalid call result\\\");\\n            if (abi.decode(result, (bool))) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Calls every target with corresponding data\\n    /// @return Result True if calls to all targets returned True. Otherwise, false\\n    function and(address[] calldata targets, bytes[] calldata data) external view returns(bool) {\\n        require(targets.length == data.length, \\\"PH: input array size mismatch\\\");\\n        for (uint256 i = 0; i < targets.length; i++) {\\n            bytes memory result = targets[i].functionStaticCall(data[i], \\\"PH: 'and' subcall failed\\\");\\n            require(result.length == 32, \\\"PH: invalid call result\\\");\\n            if (!abi.decode(result, (bool))) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's equal to the value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns the same value as `value`. Otherwise, false\\n    function eq(uint256 value, address target, bytes memory data) external view returns(bool) {\\n        bytes memory result = target.functionStaticCall(data, \\\"PH: eq\\\");\\n        require(result.length == 32, \\\"PH: invalid call result\\\");\\n        return abi.decode(result, (uint256)) == value;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's lower than value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns value which is lower than `value`. Otherwise, false\\n    function lt(uint256 value, address target, bytes memory data) external view returns(bool) {\\n        bytes memory result = target.functionStaticCall(data, \\\"PH: lt\\\");\\n        require(result.length == 32, \\\"PH: invalid call result\\\");\\n        return abi.decode(result, (uint256)) < value;\\n    }\\n\\n    /// @notice Calls target with specified data and tests if it's bigger than value\\n    /// @param value Value to test\\n    /// @return Result True if call to target returns value which is bigger than `value`. Otherwise, false\\n    function gt(uint256 value, address target, bytes memory data) external view returns(bool) {\\n        bytes memory result = target.functionStaticCall(data, \\\"PH: gt\\\");\\n        require(result.length == 32, \\\"PH: invalid call result\\\");\\n        return abi.decode(result, (uint256)) > value;\\n    }\\n\\n    /// @notice Checks passed time against block timestamp\\n    /// @return Result True if current block timestamp is lower than `time`. Otherwise, false\\n    function timestampBelow(uint256 time) external view returns(bool) {\\n        return block.timestamp < time;  // solhint-disable-line not-rely-on-time\\n    }\\n}\\n\",\"keccak256\":\"0xdc704a9ccdaa14a7a5e3079e9951b6638613ece4bbb8255be4ce07a02db43bba\",\"license\":\"MIT\"},\"contracts/interfaces/IDaiLikePermit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Interface for DAI-style permits\\ninterface IDaiLikePermit {\\n    function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x284d908d08a39638c052f4fe7d81f38c0b170f289e185c8e918b517e48ff7d0c\",\"license\":\"MIT\"},\"contracts/interfaces/InteractiveNotificationReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Interface for interactor which acts between `maker => taker` and `taker => maker` transfers.\\ninterface InteractiveNotificationReceiver {\\n    /// @notice Callback method that gets called after taker transferred funds to maker but before\\n    /// the opposite transfer happened\\n    function notifyFillOrder(\\n        address taker,\\n        address makerAsset,\\n        address takerAsset,\\n        uint256 makingAmount,\\n        uint256 takingAmount,\\n        bytes memory interactiveData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x94dd744e55a6eee1aa944b885d46c9ca5adc49bde5be854e08f8d4c31484a687\",\"license\":\"MIT\"},\"contracts/libraries/ArgumentsDecoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n/// @title Library with gas efficient alternatives to `abi.decode`\\nlibrary ArgumentsDecoder {\\n    function decodeUint256(bytes memory data) internal pure returns(uint256) {\\n        uint256 value;\\n        assembly { // solhint-disable-line no-inline-assembly\\n            value := mload(add(data, 0x20))\\n        }\\n        return value;\\n    }\\n\\n    function decodeBool(bytes memory data) internal pure returns(bool) {\\n        bool value;\\n        assembly { // solhint-disable-line no-inline-assembly\\n            value := eq(mload(add(data, 0x20)), 1)\\n        }\\n        return value;\\n    }\\n\\n    function decodeTargetAndCalldata(bytes memory data) internal pure returns(address, bytes memory) {\\n        address target;\\n        bytes memory args;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            target := mload(add(data, 0x14))\\n            args := add(data, 0x14)\\n            mstore(args, sub(mload(data), 0x14))\\n        }\\n        return (target, args);\\n    }\\n\\n    function decodeTargetAndData(bytes calldata data) internal pure returns(address, bytes calldata) {\\n        address target;\\n        bytes calldata args;\\n        assembly {  // solhint-disable-line no-inline-assembly\\n            target := shr(96, calldataload(data.offset))\\n        }\\n        args = data[20:];\\n        return (target, args);\\n    }\\n}\\n\",\"keccak256\":\"0xb893e6e92297e67992217cbbea17bc4660b11ac7248c67a85cd77e96589edbed\",\"license\":\"MIT\"},\"contracts/libraries/Permitable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"./RevertReasonParser.sol\\\";\\nimport \\\"../interfaces/IDaiLikePermit.sol\\\";\\n\\n/// @title Base contract with common permit handling logics\\nabstract contract Permitable {\\n    function _permit(address token, bytes calldata permit) internal {\\n        if (permit.length > 0) {\\n            bool success;\\n            bytes memory result;\\n            if (permit.length == 32 * 7) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\n            } else if (permit.length == 32 * 8) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(abi.encodePacked(IDaiLikePermit.permit.selector, permit));\\n            } else {\\n                revert(\\\"Wrong permit length\\\");\\n            }\\n            if (!success) {\\n                revert(RevertReasonParser.parse(result, \\\"Permit failed: \\\"));\\n            }\\n        }\\n    }\\n\\n    function _permitMemory(address token, bytes memory permit) internal {\\n        if (permit.length > 0) {\\n            bool success;\\n            bytes memory result;\\n            if (permit.length == 32 * 7) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(abi.encodePacked(IERC20Permit.permit.selector, permit));\\n            } else if (permit.length == 32 * 8) {\\n                // solhint-disable-next-line avoid-low-level-calls\\n                (success, result) = token.call(abi.encodePacked(IDaiLikePermit.permit.selector, permit));\\n            } else {\\n                revert(\\\"Wrong permit length\\\");\\n            }\\n            if (!success) {\\n                revert(RevertReasonParser.parse(result, \\\"Permit failed: \\\"));\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x318309b1174fb56d264fae004a5af600d7201b0ff3afbc414f51aac9d323bf36\",\"license\":\"MIT\"},\"contracts/libraries/RevertReasonParser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.11;\\npragma abicoder v1;\\n\\n\\n/// @title Library that allows to parse unsuccessful arbitrary calls revert reasons.\\n/// See https://solidity.readthedocs.io/en/latest/control-structures.html#revert for details.\\n/// Note that we assume revert reason being abi-encoded as Error(string) so it may fail to parse reason\\n/// if structured reverts appear in the future.\\n///\\n/// All unsuccessful parsings get encoded as Unknown(data) string\\nlibrary RevertReasonParser {\\n    bytes4 constant private _PANIC_SELECTOR = bytes4(keccak256(\\\"Panic(uint256)\\\"));\\n    bytes4 constant private _ERROR_SELECTOR = bytes4(keccak256(\\\"Error(string)\\\"));\\n\\n    function parse(bytes memory data, string memory prefix) internal pure returns (string memory) {\\n        if (data.length >= 4) {\\n            bytes4 selector;\\n\\n            assembly {  // solhint-disable-line no-inline-assembly\\n                selector := mload(add(data, 0x20))\\n            }\\n\\n            // 68 = 4-byte selector + 32 bytes offset + 32 bytes length\\n            if (selector == _ERROR_SELECTOR && data.length >= 68) {\\n                uint256 offset;\\n                bytes memory reason;\\n                assembly {  // solhint-disable-line no-inline-assembly\\n                    // 36 = 32 bytes data length + 4-byte selector\\n                    offset := mload(add(data, 36))\\n                    reason := add(data, add(36, offset))\\n                }\\n                /*\\n                    revert reason is padded up to 32 bytes with ABI encoder: Error(string)\\n                    also sometimes there is extra 32 bytes of zeros padded in the end:\\n                    https://github.com/ethereum/solidity/issues/10170\\n                    because of that we can't check for equality and instead check\\n                    that offset + string length + extra 36 bytes is less than overall data length\\n                */\\n                require(data.length >= 36 + offset + reason.length, \\\"Invalid revert reason\\\");\\n                return string(abi.encodePacked(prefix, \\\"Error(\\\", reason, \\\")\\\"));\\n            }\\n            // 36 = 4-byte selector + 32 bytes integer\\n            else if (selector == _PANIC_SELECTOR && data.length == 36) {\\n                uint256 code;\\n                assembly {  // solhint-disable-line no-inline-assembly\\n                    // 36 = 32 bytes data length + 4-byte selector\\n                    code := mload(add(data, 36))\\n                }\\n                return string(abi.encodePacked(prefix, \\\"Panic(\\\", _toHex(code), \\\")\\\"));\\n            }\\n        }\\n\\n        return string(abi.encodePacked(prefix, \\\"Unknown(\\\", _toHex(data), \\\")\\\"));\\n    }\\n\\n    function _toHex(uint256 value) private pure returns(string memory) {\\n        return _toHex(abi.encodePacked(value));\\n    }\\n\\n    function _toHex(bytes memory data) private pure returns(string memory) {\\n        bytes16 alphabet = 0x30313233343536373839616263646566;\\n        bytes memory str = new bytes(2 + data.length * 2);\\n        str[0] = \\\"0\\\";\\n        str[1] = \\\"x\\\";\\n        for (uint256 i = 0; i < data.length; i++) {\\n            str[2 * i + 2] = alphabet[uint8(data[i] >> 4)];\\n            str[2 * i + 3] = alphabet[uint8(data[i] & 0x0f)];\\n        }\\n        return string(str);\\n    }\\n}\\n\",\"keccak256\":\"0xc7d030d543916c948fc060aef60b17430f6da93ee5bfb58a2555e553be1e1e8c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604080518082018252601c81527f55626573776170204c696d6974204f726465722050726f746f636f6c000000006020808301918252835180850190945260018452601960f91b908401528151902060e08190527fad7c5bef027816a800da1736444fb58a807ef4c9603b7848673f7e3a68eb14a56101008190524660a0529192917f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f620001068184846040805160208101859052908101839052606081018290524660808201523060a082015260009060c0016040516020818303038152906040528051906020012090509392505050565b6080523060c05261012052506200011c92505050565b60805160a05160c05160e05161010051610120516159bb6200016c6000396000612d4601526000612d9501526000612d7001526000612cc901526000612cf301526000612d1d01526159bb6000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c80638673377311610145578063bf15fcd8116100bd578063d0a3b6651161008c578063f35bf8d111610071578063f35bf8d114610570578063f4a215c314610583578063fa1cb9f21461059657600080fd5b8063d0a3b6651461054a578063e61333011461055d57600080fd5b8063bf15fcd8146104e2578063c05435f1146104f5578063c53a029214610508578063cf6fc6e31461051057600080fd5b8063a65a0e7111610114578063b244b450116100f9578063b244b450146104a9578063baba5855146104bc578063bc1ed74c146104cf57600080fd5b8063a65a0e7114610483578063b0c54b6d1461049657600080fd5b8063867337731461042a578063871919d51461043d578063942461bb14610450578063961d5b1e1461047057600080fd5b80634cc4a27b116101d857806370ae92d2116101a75780637e54f0921161018c5780637e54f092146103e45780637f29a59d14610404578063825caba11461041757600080fd5b806370ae92d2146103af57806372c244a8146103cf57600080fd5b80634cc4a27b1461031f57806354dd5f741461033257806356f161241461035957806363592c2b1461039c57600080fd5b806332565d611161021457806332565d61146102de578063331f9d1b146102f15780633644e515146103045780633b845bda1461030c57600080fd5b8063057702e91461024657806306bf53d01461026e57806312adf923146102a3578063296637bf146102cb575b600080fd5b61025961025436600461489d565b6105a9565b60405190151581526020015b60405180910390f35b6102957f74ab4f0cde46aaf927859983f7d04002116dd057d4c4941f6dbfb775c3e31f4581565b604051908152602001610265565b6102b66102b1366004614b00565b61069f565b60408051928352602083019190915201610265565b6102956102d9366004614b7c565b6106f9565b6102596102ec36600461489d565b61072f565b6102956102ff366004614ba8565b61081e565b610295610b64565b61029561031a366004614ca1565b610b73565b6102b661032d366004614cbd565b610c3d565b6102957f7b63e94209420c4f6a2a8ca90b36938c948908697db47a5dc7f8e692ead4991a81565b610295610367366004614d6b565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600260209081526040808320938352929052205490565b6102596103aa366004614d97565b421090565b6102956103bd366004614db0565b60006020819052908152604090205481565b6103e26103dd366004614dcd565b610c6e565b005b6102956103f2366004614d97565b60009081526001602052604090205490565b6103e2610412366004614e35565b610cdb565b6103e2610425366004614d97565b610f8e565b6102b6610438366004614ea1565b610f9b565b61025961044b36600461489d565b610fc9565b61046361045e366004614f32565b6110b8565b6040516102659190614fcc565b61025961047e366004614e35565b611171565b610259610491366004615010565b61136d565b6102b66104a4366004615045565b611431565b6103e26104b7366004615010565b6114ef565b6102b66104ca366004615103565b61164c565b6102956104dd366004614d97565b611b54565b6102956104f0366004615182565b611bf2565b6102956105033660046151d2565b611c76565b6103e2611e5a565b61025961051e366004614d6b565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152602081905260409020541490565b6102b6610558366004615207565b611e66565b61025961056b366004614e35565b611e77565b6102b661057e366004615045565b612042565b610295610591366004614b7c565b6120a7565b6102956105a4366004615010565b6120b4565b60008061060c836040518060400160405280600681526020017f50483a20677400000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff1661218f9092919063ffffffff16565b9050805160201461067e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c7400000000000000000060448201526064015b60405180910390fd5b84818060200190518101906106939190615270565b119150505b9392505050565b6000806106eb8686866106b736889003880188615289565b3360005b6040519080825280601f01601f1916602001820160405280156106e5576020820181803683370190505b506122b6565b915091505b94509492505050565b6000836001816107098686615314565b6107139190615351565b61071d9190615369565b6107279190615380565b949350505050565b600080610792836040518060400160405280600681526020017f50483a20657100000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff1661218f9092919063ffffffff16565b905080516020146107ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c740000000000000000006044820152606401610675565b84818060200190518101906108149190615270565b1495945050505050565b60008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561086b573d6000803e3d6000fd5b505050506040513d602081101561088157600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160ff9092169173ffffffffffffffffffffffffffffffffffffffff89169163313ce5679160048083019260209291908290030181865afa1580156108f4573d6000803e3d6000fd5b505050506040513d602081101561090a57600080fd5b505160ff161461097b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f43433a206f7261636c6520646563696d616c7320646f6e2774206d6174636800604482015290519081900360640190fd5b60008673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109c8573d6000803e3d6000fd5b505050506040513d60a08110156109de57600080fd5b5060200151604080517ffeaf968c000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff89169163feaf968c9160048083019260a09291908290030181865afa158015610a54573d6000803e3d6000fd5b505050506040513d60a0811015610a6a57600080fd5b506020015190506000851315610ae057633b9aca00610a8882612c3f565b610a9187612c3f565b610a9c90600a6154db565b610aa585612c3f565b610aaf8a89615314565b610ab99190615314565b610ac39190615314565b610acd9190615380565b610ad79190615380565b92505050610b5b565b6000851215610b3a57610afa610af5866154e7565b612c3f565b610b0590600a6154db565b633b9aca00610b1383612c3f565b610b1c85612c3f565b610b268a89615314565b610b309190615314565b610ac39190615380565b633b9aca00610b4882612c3f565b610b5184612c3f565b610ab98988615314565b95945050505050565b6000610b6e612caf565b905090565b6000610c377f74ab4f0cde46aaf927859983f7d04002116dd057d4c4941f6dbfb775c3e31f4583604051602001610c1c92919060006101008201905083825282516020830152602083015173ffffffffffffffffffffffffffffffffffffffff80821660408501528060408601511660608501528060608601511660808501528060808601511660a0850152505060a083015160c083015260c083015160e08301529392505050565b60405160208183030381529060405280519060200120612de3565b92915050565b600080610c4f8a604001518585612e4c565b610c5d8a8a8a8a8a8a61164c565b915091509850989650505050505050565b33600090815260208190526040812054610c8c9060ff841690615351565b33600081815260208181526040918290208490558151848152915193945091927ffc69110dd11eb791755e4abd6b7d281bae236de95736d38a23782814be5e10db929181900390910190a25050565b828114610d44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4c4f503a2061727261792073697a65206d69736d6174636800000000000000006044820152606401610675565b60008367ffffffffffffffff811115610d5f57610d5f614767565b6040519080825280601f01601f191660200182016040528015610d89576020820181803683370190505b50905060005b84811015610f1e57600080878784818110610dac57610dac615520565b9050602002016020810190610dc19190614db0565b73ffffffffffffffffffffffffffffffffffffffff16868685818110610de957610de9615520565b9050602002810190610dfb919061554f565b604051610e099291906155b4565b6000604051808303816000865af19150503d8060008114610e46576040519150601f19603f3d011682016040523d82523d6000602084013e610e4b565b606091505b5091509150818015610e5e575060008151115b15610e7b5780516020148015610e78575060208101516001145b91505b81610ea6577f3000000000000000000000000000000000000000000000000000000000000000610ec8565b7f31000000000000000000000000000000000000000000000000000000000000005b848481518110610eda57610eda615520565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050508080610f16906155c4565b915050610d8f565b5080604051602001610f309190615629565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610675916004016156b8565b610f98338261319b565b50565b600080610fbb878787610fb336899003890189615289565b8760006106bb565b915091509550959350505050565b60008061102c836040518060400160405280600681526020017f50483a206c7400000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff1661218f9092919063ffffffff16565b90508051602014611099576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c740000000000000000006044820152606401610675565b84818060200190518101906110ae9190615270565b1095945050505050565b60606000825167ffffffffffffffff8111156110d6576110d6614767565b6040519080825280602002602001820160405280156110ff578160200160208202803683370190505b50905060005b835181101561116a576001600085838151811061112457611124615520565b602002602001015181526020019081526020016000205482828151811061114d5761114d615520565b602090810291909101015280611162816155c4565b915050611105565b5092915050565b60008382146111dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f50483a20696e7075742061727261792073697a65206d69736d617463680000006044820152606401610675565b60005b848110156113615760006112be8585848181106111fe576111fe615520565b9050602002810190611210919061554f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601881527f50483a2027616e64272073756263616c6c206661696c65640000000000000000602082015291508a9050898681811061128c5761128c615520565b90506020020160208101906112a19190614db0565b73ffffffffffffffffffffffffffffffffffffffff16919061218f565b9050805160201461132b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c740000000000000000006044820152606401610675565b8080602001905181019061133f91906156cb565b61134e57600092505050610727565b5080611359816155c4565b9150506111df565b50600195945050505050565b61018081015160408051808201909152601a81527f4c4f503a207072656469636174652063616c6c206661696c6564000000000000602082015260009182916113b791309161218f565b90508051602014611424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4c4f503a20696e76616c6964207072656469636174652072657475726e0000006044820152606401610675565b6020810151600114610698565b600080601483101561149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4c4f503a207065726d6974206c656e67746820746f6f206c6f770000000000006044820152606401610675565b60003660006114ae8787613267565b9250925092506114bf838383612e4c565b6114dc8c8c8c6114d4368e90038e018e615289565b8c60006106bb565b9450945050505097509795505050505050565b606081015173ffffffffffffffffffffffffffffffffffffffff163314611572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a204163636573732064656e69656400000000000000000000000000006044820152606401610675565b600061157d826120b4565b6000818152600160208190526040909120549192508114156115fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4c4f503a20616c72656164792066696c6c6564000000000000000000000000006044820152606401610675565b604080518381526020810183905233917fcbfa7d191838ece7ba4783ca3a30afd316619b7f368094b57ee7ffde9a923db1910160405180910390a25060009081526001602081905260409091205550565b60008073ffffffffffffffffffffffffffffffffffffffff83166116cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4c4f503a207a65726f2074617267657420697320666f7262696464656e0000006044820152606401610675565b6060880151608089015173ffffffffffffffffffffffffffffffffffffffff1615806117115750608089015173ffffffffffffffffffffffffffffffffffffffff1633145b611777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a2070726976617465206f7264657200000000000000000000000000006044820152606401610675565b60006117828a610b73565b90506117c582828b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061329092505050565b61182b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a20626164207369676e617475726500000000000000000000000000006044820152606401610675565b895167ffffffffffffffff604082901c168015806118495750804211155b6118af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a206f72646572206578706972656400000000000000000000000000006044820152606401610675565b6118b9848361319b565b505060a08a015160c08b0151871580156118d1575088155b156118e157819850809750611a45565b876119625781891115611950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4c4f503a206d616b696e6720616d6f756e7420657863656564656400000000006044820152606401610675565b61195b82828b6106f9565b9750611a45565b886119e357808811156119d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4c4f503a2074616b696e6720616d6f756e7420657863656564656400000000006044820152606401610675565b6119dc82828a6120a7565b9850611a45565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4c4f503a20626f746820616d6f756e747320617265206e6f6e2d7a65726f00006044820152606401610675565b5050600087118015611a575750600086115b611abd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4c4f503a2063616e27742073776170203020616d6f756e7400000000000000006044820152606401610675565b60208a0151611ae49073ffffffffffffffffffffffffffffffffffffffff1683878a61347f565b60408a0151611b0b9073ffffffffffffffffffffffffffffffffffffffff1633848961347f565b60408051828152602081018990527fc3b639f02b125bfa160e50739b8c44eb2d1b6908e2b6d5925c6d770f2ca78127910160405180910390a15094989397509295505050505050565b60008181526001602052604081205480611bca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a20556e6b6e6f776e206f7264657200000000000000000000000000006044820152606401610675565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600080611c55836040518060400160405280601781526020017f41433a2061726269747261727953746174696343616c6c0000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff1661218f9092919063ffffffff16565b9050808060200190516020811015611c6c57600080fd5b5051949350505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611cc4573d6000803e3d6000fd5b505050506040513d60a0811015611cda57600080fd5b506020015190507f80000000000000000000000000000000000000000000000000000000000000008416158015907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861690611dde57633b9aca00611d3e84612c3f565b8873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d89573d6000803e3d6000fd5b505050506040513d6020811015611d9f57600080fd5b5051611dac90600a6156ed565b611db68489615314565b611dc09190615314565b611dca9190615380565b611dd49190615380565b9350505050610698565b633b9aca008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e2e573d6000803e3d6000fd5b505050506040513d6020811015611e4457600080fd5b5051611e5190600a6156ed565b611dac85612c3f565b611e646001610c6e565b565b600080610fbb87878787873361164c565b6000838214611ee2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f50483a20696e7075742061727261792073697a65206d69736d617463680000006044820152606401610675565b60005b84811015612036576000611f92858584818110611f0457611f04615520565b9050602002810190611f16919061554f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601781527f50483a20276f72272073756263616c6c206661696c6564000000000000000000602082015291508a9050898681811061128c5761128c615520565b90508051602014611fff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c740000000000000000006044820152606401610675565b8080602001905181019061201391906156cb565b1561202357600192505050610727565b508061202e816155c4565b915050611ee5565b50600095945050505050565b60008061209789898961205a368b90038b018b615289565b8989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506122b692505050565b9150915097509795505050505050565b60008261071d8584615314565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290528290506106987f7b63e94209420c4f6a2a8ca90b36938c948908697db47a5dc7f8e692ead4991a8285610100015180519060200120866101200151805190602001208761014001518051906020012088610160015180519060200120896101800151805190602001208a6101a00151805190602001208b6101c0015180519060200120604051602001610c1c999897969594939291906156fc565b606073ffffffffffffffffffffffffffffffffffffffff84163b612234576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7460448201527f72616374000000000000000000000000000000000000000000000000000000006064820152608401610675565b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161225c91906157e9565b600060405180830381855afa9150503d8060008114612297576040519150601f19603f3d011682016040523d82523d6000602084013e61229c565b606091505b50915091506122ac82828661351a565b9695505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff8416612336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4c4f503a207a65726f2074617267657420697320666f7262696464656e0000006044820152606401610675565b6000612341896120b4565b6000818152600160208190526040909120549192508114156123bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4c4f503a2072656d61696e696e6720616d6f756e7420697320300000000000006044820152606401610675565b60a08a015173ffffffffffffffffffffffffffffffffffffffff1615806123ff575060a08a015173ffffffffffffffffffffffffffffffffffffffff1633145b612465576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a2070726976617465206f7264657200000000000000000000000000006044820152606401610675565b806125f2576124af8a60600151838b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061329092505050565b612515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a20626164207369676e617475726500000000000000000000000000006044820152606401610675565b8960c00151905060148a6101a0015151106125ed576000806125668c6101a0015160148101805191517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0181529091565b91509150612574828261356d565b600084815260016020526040902054156125ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4c4f503a207265656e7472616e637920646574656374656400000000000000006044820152606401610675565b50505b612615565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b6101808a015151156126905761262a8a61136d565b612690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4c4f503a207072656469636174652072657475726e65642066616c73650000006044820152606401610675565b865160208801511590151415612702576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4c4f503a206f6e6c79206f6e6520616d6f756e742073686f756c6420626520306044820152606401610675565b60208701516127ca57865181811115612719578188525b6127368b61016001518c60c001518a600001518e60e001516137f2565b60208901528751604089015161274c9190615314565b81896020015161275c9190615314565b11156127c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4c4f503a2074616b696e6720616d6f756e7420746f6f206869676800000000006044820152606401610675565b506128a7565b60208701516101408b015160e08c015160c08d01516127ec92919084906137f2565b80895282101561281c578188526101608b015160c08c015160e08d015161281692919085906137f2565b60208901525b876020015188604001516128309190615314565b885161283d908390615314565b10156128a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4c4f503a206d616b696e6720616d6f756e7420746f6f206c6f770000000000006044820152606401610675565b505b8651158015906128bb575060008760200151115b612921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4c4f503a2063616e27742073776170203020616d6f756e7400000000000000006044820152606401610675565b8651600083815260016020818152604092839020939094039081019092558051848152928301829052909133917fb9ed0243fdf00f0545c63a0af8850c090d86bb46682baec4bf3c496814fe4f02910160405180910390a2506020808a015160608b015188516101008d01516040516129f3956129df947f23b872dd000000000000000000000000000000000000000000000000000000009473ffffffffffffffffffffffffffffffffffffffff91821694918e1693909201615805565b604051602081830303815290604052613960565b6014845110612abf57600080612a338660148101805191517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0181529091565b915091508173ffffffffffffffffffffffffffffffffffffffff1663cf21c775338d602001518e604001518c600001518d60200151876040518763ffffffff1660e01b8152600401612a8a96959493929190615862565b600060405180830381600087803b158015612aa457600080fd5b505af1158015612ab8573d6000803e3d6000fd5b5050505050505b604089015160808a0151612b5291907f23b872dd0000000000000000000000000000000000000000000000000000000090339073ffffffffffffffffffffffffffffffffffffffff1615612b17578c60800151612b1d565b8c606001515b73ffffffffffffffffffffffffffffffffffffffff168a602001518e61012001516040516020016129df959493929190615805565b6014896101c001515110612c2857600080612b9c8b6101c0015160148101805191517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0181529091565b915091508173ffffffffffffffffffffffffffffffffffffffff1663cf21c775338d602001518e604001518c600001518d60200151876040518763ffffffff1660e01b8152600401612bf396959493929190615862565b600060405180830381600087803b158015612c0d57600080fd5b505af1158015612c21573d6000803e3d6000fd5b5050505050505b505083516020850151909150965096945050505050565b600080821215612cab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610675565b5090565b60003073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015612d1557507f000000000000000000000000000000000000000000000000000000000000000046145b15612d3f57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000610c37612df0612caf565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b8015613196576000606060e0831415612f89576040517fd505accf000000000000000000000000000000000000000000000000000000006020820181815273ffffffffffffffffffffffffffffffffffffffff881692879187916024018383808284378083019250505093505050506040516020818303038152906040526040518082805190602001908083835b60208310612f1757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612eda565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612f79576040519150601f19603f3d011682016040523d82523d6000602084013e612f7e565b606091505b5090925090506130b1565b61010083141561304a576040517f8fcbaf0c000000000000000000000000000000000000000000000000000000006020820181815273ffffffffffffffffffffffffffffffffffffffff8816928791879160240183838082843780830192505050935050505060405160208183030381529060405260405180828051906020019080838360208310612f1757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612eda565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f57726f6e67207065726d6974206c656e67746800000000000000000000000000604482015290519081900360640190fd5b81613193576130f5816040518060400160405280600f81526020017f5065726d6974206661696c65643a200000000000000000000000000000000000815250613a47565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613158578181015183820152602001613140565b50505050905090810190601f1680156131855780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505b505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604080832066ffffffffffffff600886901c16808552928190529220549091600160ff85161b918083161561324f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4c4f503a20696e76616c696461746564206f72646572000000000000000000006044820152606401610675565b60009384526020919091526040909220911790555050565b60003681843560601c828261327f876014818b6158af565b939650945091925050509250925092565b600080600061329f8585613fe2565b909250905060008160048111156132b8576132b86158d9565b1480156132f057508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561330057600192505050610698565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8888604051602401613335929190615908565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516133be91906157e9565b600060405180830381855afa9150503d80600081146133f9576040519150601f19603f3d011682016040523d82523d6000602084013e6133fe565b606091505b5091509150818015613411575080516020145b8015613473575080517f1626ba7e000000000000000000000000000000000000000000000000000000009061344f9083016020908101908401615921565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b98975050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052613514908590614052565b50505050565b60608315613529575081610698565b8251156135395782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067591906156b8565b8051156137ee5760006060825160e0141561370b578373ffffffffffffffffffffffffffffffffffffffff1663d505accf60e01b8460405160200180837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040182805190602001908083835b6020831061361757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016135da565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b6020831061369957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161365c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146136fb576040519150601f19603f3d011682016040523d82523d6000602084013e613700565b606091505b5090925090506137aa565b8251610100141561304a578373ffffffffffffffffffffffffffffffffffffffff16638fcbaf0c60e01b8460405160200180837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040182805190602001908083836020831061361757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016135da565b81613514576130f5816040518060400160405280600f81526020017f5065726d6974206661696c65643a200000000000000000000000000000000000815250613a47565b5050565b600084516000141561386e57838314613867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4c4f503a2077726f6e6720616d6f756e740000000000000000000000000000006044820152606401610675565b5080610727565b60006138e88685604051602001613886929190615963565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828201909152601a82527f4c4f503a20676574416d6f756e742063616c6c206661696c65640000000000006020830152309161218f565b90508051602014613955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4c4f503a20696e76616c696420676574416d6f756e742072657475726e0000006044820152606401610675565b602001519050610727565b60006139c2826040518060400160405280601681526020017f4c4f503a2061737365742e63616c6c206661696c6564000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff1661415e9092919063ffffffff16565b80519091501561319657805160201480156139e1575060208101516001145b613196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4c4f503a2061737365742e63616c6c2062616420726573756c740000000000006044820152606401610675565b60606004835110613e765760208301517fffffffff0000000000000000000000000000000000000000000000000000000081167f08c379a000000000000000000000000000000000000000000000000000000000148015613aaa57506044845110155b15613cab57602484810151808601820180519192909190613acc908490615351565b613ad69190615351565b86511015613b4557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c69642072657665727420726561736f6e0000000000000000000000604482015290519081900360640190fd5b84816040516020018083805190602001908083835b60208310613b9757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613b5a565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790527f4572726f72280000000000000000000000000000000000000000000000000000919093019081528451600690910192850191508083835b60208310613c4457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613c07565b6001836020036101000a038019825116818451168082178552505050505050905001807f2900000000000000000000000000000000000000000000000000000000000000815250600101925050506040516020818303038152906040529350505050610c37565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f4e487b7100000000000000000000000000000000000000000000000000000000148015613cfd575083516024145b15613e7457602484015183613d118261416d565b6040516020018083805190602001908083835b60208310613d6157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613d24565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790527f50616e6963280000000000000000000000000000000000000000000000000000919093019081528451600690910192850191508083835b60208310613e0e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613dd1565b6001836020036101000a038019825116818451168082178552505050505050905001807f29000000000000000000000000000000000000000000000000000000000000008152506001019250505060405160208183030381529060405292505050610c37565b505b81613e8084614193565b6040516020018083805190602001908083835b60208310613ed057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613e93565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790527f556e6b6e6f776e28000000000000000000000000000000000000000000000000919093019081528451600890910192850191508083835b60208310613f7d57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613f40565b6001836020036101000a038019825116818451168082178552505050505050905001807f290000000000000000000000000000000000000000000000000000000000000081525060010192505050604051602081830303815290604052905092915050565b6000808251604114156140195760208301516040840151606085015160001a61400d87828585614438565b9450945050505061404b565b825160401415614043576020830151604084015161403886838361454d565b93509350505061404b565b506000905060025b9250929050565b60006140b4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661415e9092919063ffffffff16565b80519091501561319657808060200190518101906140d291906156cb565b613196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610675565b6060610727848460008561459f565b6060610c3782604051602001808281526020019150506040516020818303038152906040525b80516060907f3031323334353637383961626364656600000000000000000000000000000000906000906141c8906002615314565b6141d3906002615351565b67ffffffffffffffff8111156141eb576141eb614767565b6040519080825280601f01601f191660200182016040528015614215576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061424c5761424c615520565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106142af576142af615520565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b8451811015614430578260048683815181106142ff576142ff615520565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016901c60f81c6010811061433b5761433b615520565b1a60f81b8261434b836002615314565b614356906002615351565b8151811061436657614366615520565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350828582815181106143a8576143a8615520565b60209101015160f81c600f16601081106143c4576143c4615520565b1a60f81b826143d4836002615314565b6143df906003615351565b815181106143ef576143ef615520565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080614428816155c4565b9150506142e1565b509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561446f57506000905060036106f0565b8460ff16601b1415801561448757508460ff16601c14155b1561449857506000905060046106f0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156144ec573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116614540576000600192509250506106f0565b9660009650945050505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161458360ff86901c601b615351565b905061459187828885614438565b935093505050935093915050565b606082471015614631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610675565b73ffffffffffffffffffffffffffffffffffffffff85163b6146af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610675565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516146d891906157e9565b60006040518083038185875af1925050503d8060008114614715576040519150601f19603f3d011682016040523d82523d6000602084013e61471a565b606091505b509150915061472a82828661351a565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f9857600080fd5b803561476281614735565b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff811182821017156147ba576147ba614767565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561480757614807614767565b604052919050565b600082601f83011261482057600080fd5b813567ffffffffffffffff81111561483a5761483a614767565b61486b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016147c0565b81815284602083860101111561488057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156148b257600080fd5b8335925060208401356148c481614735565b9150604084013567ffffffffffffffff8111156148e057600080fd5b6148ec8682870161480f565b9150509250925092565b60006101e0828403121561490957600080fd5b614911614796565b90508135815261492360208301614757565b602082015261493460408301614757565b604082015261494560608301614757565b606082015261495660808301614757565b608082015261496760a08301614757565b60a082015260c082013560c082015260e082013560e08201526101008083013567ffffffffffffffff8082111561499d57600080fd5b6149a98683870161480f565b838501526101209250828501359150808211156149c557600080fd5b6149d18683870161480f565b838501526101409250828501359150808211156149ed57600080fd5b6149f98683870161480f565b83850152610160925082850135915080821115614a1557600080fd5b614a218683870161480f565b83850152610180925082850135915080821115614a3d57600080fd5b614a498683870161480f565b838501526101a0925082850135915080821115614a6557600080fd5b614a718683870161480f565b838501526101c0925082850135915080821115614a8d57600080fd5b50614a9a8582860161480f565b82840152505092915050565b60008083601f840112614ab857600080fd5b50813567ffffffffffffffff811115614ad057600080fd5b60208301915083602082850101111561404b57600080fd5b600060608284031215614afa57600080fd5b50919050565b60008060008060a08587031215614b1657600080fd5b843567ffffffffffffffff80821115614b2e57600080fd5b614b3a888389016148f6565b95506020870135915080821115614b5057600080fd5b50614b5d87828801614aa6565b9094509250614b7190508660408701614ae8565b905092959194509250565b600080600060608486031215614b9157600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215614bc057600080fd5b8535614bcb81614735565b94506020860135614bdb81614735565b94979496505050506040830135926060810135926080909101359150565b600060e08284031215614c0b57600080fd5b60405160e0810181811067ffffffffffffffff82111715614c2e57614c2e614767565b604052823581529050806020830135614c4681614735565b60208201526040830135614c5981614735565b60408201526060830135614c6c81614735565b60608201526080830135614c7f81614735565b8060808301525060a083013560a082015260c083013560c08201525092915050565b600060e08284031215614cb357600080fd5b6106988383614bf9565b600080600080600080600080610180898b031215614cda57600080fd5b614ce48a8a614bf9565b975060e089013567ffffffffffffffff80821115614d0157600080fd5b614d0d8c838d01614aa6565b90995097506101008b013596506101208b013595506101408b01359150614d3382614735565b9093506101608a01359080821115614d4a57600080fd5b50614d578b828c01614aa6565b999c989b5096995094979396929594505050565b60008060408385031215614d7e57600080fd5b8235614d8981614735565b946020939093013593505050565b600060208284031215614da957600080fd5b5035919050565b600060208284031215614dc257600080fd5b813561069881614735565b600060208284031215614ddf57600080fd5b813560ff8116811461069857600080fd5b60008083601f840112614e0257600080fd5b50813567ffffffffffffffff811115614e1a57600080fd5b6020830191508360208260051b850101111561404b57600080fd5b60008060008060408587031215614e4b57600080fd5b843567ffffffffffffffff80821115614e6357600080fd5b614e6f88838901614df0565b90965094506020870135915080821115614e8857600080fd5b50614e9587828801614df0565b95989497509550505050565b600080600080600060c08688031215614eb957600080fd5b853567ffffffffffffffff80821115614ed157600080fd5b614edd89838a016148f6565b96506020880135915080821115614ef357600080fd5b50614f0088828901614aa6565b9095509350614f1490508760408801614ae8565b915060a0860135614f2481614735565b809150509295509295909350565b60006020808385031215614f4557600080fd5b823567ffffffffffffffff80821115614f5d57600080fd5b818501915085601f830112614f7157600080fd5b813581811115614f8357614f83614767565b8060051b9150614f948483016147c0565b8181529183018401918481019088841115614fae57600080fd5b938501935b8385101561347357843582529385019390850190614fb3565b6020808252825182820181905260009190848201906040850190845b8181101561500457835183529284019291840191600101614fe8565b50909695505050505050565b60006020828403121561502257600080fd5b813567ffffffffffffffff81111561503957600080fd5b610727848285016148f6565b600080600080600080600060e0888a03121561506057600080fd5b873567ffffffffffffffff8082111561507857600080fd5b6150848b838c016148f6565b985060208a013591508082111561509a57600080fd5b6150a68b838c01614aa6565b90985096508691506150bb8b60408c01614ae8565b955060a08a013591506150cd82614735565b90935060c089013590808211156150e357600080fd5b506150f08a828b01614aa6565b989b979a50959850939692959293505050565b600080600080600080610160878903121561511d57600080fd5b6151278888614bf9565b955060e087013567ffffffffffffffff81111561514357600080fd5b61514f89828a01614aa6565b9096509450506101008701359250610120870135915061014087013561517481614735565b809150509295509295509295565b6000806040838503121561519557600080fd5b82356151a081614735565b9150602083013567ffffffffffffffff8111156151bc57600080fd5b6151c88582860161480f565b9150509250929050565b6000806000606084860312156151e757600080fd5b83356151f281614735565b95602085013595506040909401359392505050565b6000806000806000610140868803121561522057600080fd5b61522a8787614bf9565b945060e086013567ffffffffffffffff81111561524657600080fd5b61525288828901614aa6565b96999098509596610100810135966101209091013595509350505050565b60006020828403121561528257600080fd5b5051919050565b60006060828403121561529b57600080fd5b6040516060810181811067ffffffffffffffff821117156152be576152be614767565b80604052508235815260208301356020820152604083013560408201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561534c5761534c6152e5565b500290565b60008219821115615364576153646152e5565b500190565b60008282101561537b5761537b6152e5565b500390565b6000826153b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b8085111561541457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156153fa576153fa6152e5565b8085161561540757918102915b93841c93908002906153c0565b509250929050565b60008261542b57506001610c37565b8161543857506000610c37565b816001811461544e576002811461545857615474565b6001915050610c37565b60ff841115615469576154696152e5565b50506001821b610c37565b5060208310610133831016604e8410600b8410161715615497575081810a610c37565b6154a183836153bb565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156154d3576154d36152e5565b029392505050565b6000610698838361541c565b60007f8000000000000000000000000000000000000000000000000000000000000000821415615519576155196152e5565b5060000390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261558457600080fd5b83018035915067ffffffffffffffff82111561559f57600080fd5b60200191503681900382131561404b57600080fd5b8183823760009101908152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156155f6576155f66152e5565b5060010190565b60005b83811015615618578181015183820152602001615600565b838111156135145750506000910152565b7f43414c4c5f524553554c54535f0000000000000000000000000000000000000081526000825161566181600d8501602087016155fd565b91909101600d0192915050565b600081518084526156868160208601602086016155fd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610698602083018461566e565b6000602082840312156156dd57600080fd5b8151801515811461069857600080fd5b600061069860ff84168361541c565b6000610200820190508a82528951602083015260208a015173ffffffffffffffffffffffffffffffffffffffff80821660408501528060408d01511660608501528060608d0151166080850152505060808a015161577260a084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a08a015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c08a015160e083015260e08a015161010083015288610120830152876101408301528661016083015285610180830152846101a0830152836101c0830152826101e08301529a9950505050505050505050565b600082516157fb8184602087016155fd565b9190910192915050565b7fffffffff0000000000000000000000000000000000000000000000000000000086168152846004820152836024820152826044820152600082516158518160648501602087016155fd565b919091016064019695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015283608083015260c060a083015261347360c083018461566e565b600080858511156158bf57600080fd5b838611156158cc57600080fd5b5050820193919092039150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b828152604060208201526000610727604083018461566e565b60006020828403121561593357600080fd5b81517fffffffff000000000000000000000000000000000000000000000000000000008116811461069857600080fd5b600083516159758184602088016155fd565b919091019182525060200191905056fea26469706673582212200047c8b6224a27ed4c26de9279d2e9968d6089f758d23fbc2235d8cebc3ffe6564736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102415760003560e01c80638673377311610145578063bf15fcd8116100bd578063d0a3b6651161008c578063f35bf8d111610071578063f35bf8d114610570578063f4a215c314610583578063fa1cb9f21461059657600080fd5b8063d0a3b6651461054a578063e61333011461055d57600080fd5b8063bf15fcd8146104e2578063c05435f1146104f5578063c53a029214610508578063cf6fc6e31461051057600080fd5b8063a65a0e7111610114578063b244b450116100f9578063b244b450146104a9578063baba5855146104bc578063bc1ed74c146104cf57600080fd5b8063a65a0e7114610483578063b0c54b6d1461049657600080fd5b8063867337731461042a578063871919d51461043d578063942461bb14610450578063961d5b1e1461047057600080fd5b80634cc4a27b116101d857806370ae92d2116101a75780637e54f0921161018c5780637e54f092146103e45780637f29a59d14610404578063825caba11461041757600080fd5b806370ae92d2146103af57806372c244a8146103cf57600080fd5b80634cc4a27b1461031f57806354dd5f741461033257806356f161241461035957806363592c2b1461039c57600080fd5b806332565d611161021457806332565d61146102de578063331f9d1b146102f15780633644e515146103045780633b845bda1461030c57600080fd5b8063057702e91461024657806306bf53d01461026e57806312adf923146102a3578063296637bf146102cb575b600080fd5b61025961025436600461489d565b6105a9565b60405190151581526020015b60405180910390f35b6102957f74ab4f0cde46aaf927859983f7d04002116dd057d4c4941f6dbfb775c3e31f4581565b604051908152602001610265565b6102b66102b1366004614b00565b61069f565b60408051928352602083019190915201610265565b6102956102d9366004614b7c565b6106f9565b6102596102ec36600461489d565b61072f565b6102956102ff366004614ba8565b61081e565b610295610b64565b61029561031a366004614ca1565b610b73565b6102b661032d366004614cbd565b610c3d565b6102957f7b63e94209420c4f6a2a8ca90b36938c948908697db47a5dc7f8e692ead4991a81565b610295610367366004614d6b565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600260209081526040808320938352929052205490565b6102596103aa366004614d97565b421090565b6102956103bd366004614db0565b60006020819052908152604090205481565b6103e26103dd366004614dcd565b610c6e565b005b6102956103f2366004614d97565b60009081526001602052604090205490565b6103e2610412366004614e35565b610cdb565b6103e2610425366004614d97565b610f8e565b6102b6610438366004614ea1565b610f9b565b61025961044b36600461489d565b610fc9565b61046361045e366004614f32565b6110b8565b6040516102659190614fcc565b61025961047e366004614e35565b611171565b610259610491366004615010565b61136d565b6102b66104a4366004615045565b611431565b6103e26104b7366004615010565b6114ef565b6102b66104ca366004615103565b61164c565b6102956104dd366004614d97565b611b54565b6102956104f0366004615182565b611bf2565b6102956105033660046151d2565b611c76565b6103e2611e5a565b61025961051e366004614d6b565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152602081905260409020541490565b6102b6610558366004615207565b611e66565b61025961056b366004614e35565b611e77565b6102b661057e366004615045565b612042565b610295610591366004614b7c565b6120a7565b6102956105a4366004615010565b6120b4565b60008061060c836040518060400160405280600681526020017f50483a20677400000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff1661218f9092919063ffffffff16565b9050805160201461067e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c7400000000000000000060448201526064015b60405180910390fd5b84818060200190518101906106939190615270565b119150505b9392505050565b6000806106eb8686866106b736889003880188615289565b3360005b6040519080825280601f01601f1916602001820160405280156106e5576020820181803683370190505b506122b6565b915091505b94509492505050565b6000836001816107098686615314565b6107139190615351565b61071d9190615369565b6107279190615380565b949350505050565b600080610792836040518060400160405280600681526020017f50483a20657100000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff1661218f9092919063ffffffff16565b905080516020146107ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c740000000000000000006044820152606401610675565b84818060200190518101906108149190615270565b1495945050505050565b60008473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561086b573d6000803e3d6000fd5b505050506040513d602081101561088157600080fd5b5051604080517f313ce567000000000000000000000000000000000000000000000000000000008152905160ff9092169173ffffffffffffffffffffffffffffffffffffffff89169163313ce5679160048083019260209291908290030181865afa1580156108f4573d6000803e3d6000fd5b505050506040513d602081101561090a57600080fd5b505160ff161461097b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f43433a206f7261636c6520646563696d616c7320646f6e2774206d6174636800604482015290519081900360640190fd5b60008673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156109c8573d6000803e3d6000fd5b505050506040513d60a08110156109de57600080fd5b5060200151604080517ffeaf968c000000000000000000000000000000000000000000000000000000008152905191925060009173ffffffffffffffffffffffffffffffffffffffff89169163feaf968c9160048083019260a09291908290030181865afa158015610a54573d6000803e3d6000fd5b505050506040513d60a0811015610a6a57600080fd5b506020015190506000851315610ae057633b9aca00610a8882612c3f565b610a9187612c3f565b610a9c90600a6154db565b610aa585612c3f565b610aaf8a89615314565b610ab99190615314565b610ac39190615314565b610acd9190615380565b610ad79190615380565b92505050610b5b565b6000851215610b3a57610afa610af5866154e7565b612c3f565b610b0590600a6154db565b633b9aca00610b1383612c3f565b610b1c85612c3f565b610b268a89615314565b610b309190615314565b610ac39190615380565b633b9aca00610b4882612c3f565b610b5184612c3f565b610ab98988615314565b95945050505050565b6000610b6e612caf565b905090565b6000610c377f74ab4f0cde46aaf927859983f7d04002116dd057d4c4941f6dbfb775c3e31f4583604051602001610c1c92919060006101008201905083825282516020830152602083015173ffffffffffffffffffffffffffffffffffffffff80821660408501528060408601511660608501528060608601511660808501528060808601511660a0850152505060a083015160c083015260c083015160e08301529392505050565b60405160208183030381529060405280519060200120612de3565b92915050565b600080610c4f8a604001518585612e4c565b610c5d8a8a8a8a8a8a61164c565b915091509850989650505050505050565b33600090815260208190526040812054610c8c9060ff841690615351565b33600081815260208181526040918290208490558151848152915193945091927ffc69110dd11eb791755e4abd6b7d281bae236de95736d38a23782814be5e10db929181900390910190a25050565b828114610d44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4c4f503a2061727261792073697a65206d69736d6174636800000000000000006044820152606401610675565b60008367ffffffffffffffff811115610d5f57610d5f614767565b6040519080825280601f01601f191660200182016040528015610d89576020820181803683370190505b50905060005b84811015610f1e57600080878784818110610dac57610dac615520565b9050602002016020810190610dc19190614db0565b73ffffffffffffffffffffffffffffffffffffffff16868685818110610de957610de9615520565b9050602002810190610dfb919061554f565b604051610e099291906155b4565b6000604051808303816000865af19150503d8060008114610e46576040519150601f19603f3d011682016040523d82523d6000602084013e610e4b565b606091505b5091509150818015610e5e575060008151115b15610e7b5780516020148015610e78575060208101516001145b91505b81610ea6577f3000000000000000000000000000000000000000000000000000000000000000610ec8565b7f31000000000000000000000000000000000000000000000000000000000000005b848481518110610eda57610eda615520565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050508080610f16906155c4565b915050610d8f565b5080604051602001610f309190615629565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610675916004016156b8565b610f98338261319b565b50565b600080610fbb878787610fb336899003890189615289565b8760006106bb565b915091509550959350505050565b60008061102c836040518060400160405280600681526020017f50483a206c7400000000000000000000000000000000000000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff1661218f9092919063ffffffff16565b90508051602014611099576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c740000000000000000006044820152606401610675565b84818060200190518101906110ae9190615270565b1095945050505050565b60606000825167ffffffffffffffff8111156110d6576110d6614767565b6040519080825280602002602001820160405280156110ff578160200160208202803683370190505b50905060005b835181101561116a576001600085838151811061112457611124615520565b602002602001015181526020019081526020016000205482828151811061114d5761114d615520565b602090810291909101015280611162816155c4565b915050611105565b5092915050565b60008382146111dc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f50483a20696e7075742061727261792073697a65206d69736d617463680000006044820152606401610675565b60005b848110156113615760006112be8585848181106111fe576111fe615520565b9050602002810190611210919061554f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601881527f50483a2027616e64272073756263616c6c206661696c65640000000000000000602082015291508a9050898681811061128c5761128c615520565b90506020020160208101906112a19190614db0565b73ffffffffffffffffffffffffffffffffffffffff16919061218f565b9050805160201461132b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c740000000000000000006044820152606401610675565b8080602001905181019061133f91906156cb565b61134e57600092505050610727565b5080611359816155c4565b9150506111df565b50600195945050505050565b61018081015160408051808201909152601a81527f4c4f503a207072656469636174652063616c6c206661696c6564000000000000602082015260009182916113b791309161218f565b90508051602014611424576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4c4f503a20696e76616c6964207072656469636174652072657475726e0000006044820152606401610675565b6020810151600114610698565b600080601483101561149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4c4f503a207065726d6974206c656e67746820746f6f206c6f770000000000006044820152606401610675565b60003660006114ae8787613267565b9250925092506114bf838383612e4c565b6114dc8c8c8c6114d4368e90038e018e615289565b8c60006106bb565b9450945050505097509795505050505050565b606081015173ffffffffffffffffffffffffffffffffffffffff163314611572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a204163636573732064656e69656400000000000000000000000000006044820152606401610675565b600061157d826120b4565b6000818152600160208190526040909120549192508114156115fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4c4f503a20616c72656164792066696c6c6564000000000000000000000000006044820152606401610675565b604080518381526020810183905233917fcbfa7d191838ece7ba4783ca3a30afd316619b7f368094b57ee7ffde9a923db1910160405180910390a25060009081526001602081905260409091205550565b60008073ffffffffffffffffffffffffffffffffffffffff83166116cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4c4f503a207a65726f2074617267657420697320666f7262696464656e0000006044820152606401610675565b6060880151608089015173ffffffffffffffffffffffffffffffffffffffff1615806117115750608089015173ffffffffffffffffffffffffffffffffffffffff1633145b611777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a2070726976617465206f7264657200000000000000000000000000006044820152606401610675565b60006117828a610b73565b90506117c582828b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061329092505050565b61182b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a20626164207369676e617475726500000000000000000000000000006044820152606401610675565b895167ffffffffffffffff604082901c168015806118495750804211155b6118af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a206f72646572206578706972656400000000000000000000000000006044820152606401610675565b6118b9848361319b565b505060a08a015160c08b0151871580156118d1575088155b156118e157819850809750611a45565b876119625781891115611950576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4c4f503a206d616b696e6720616d6f756e7420657863656564656400000000006044820152606401610675565b61195b82828b6106f9565b9750611a45565b886119e357808811156119d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4c4f503a2074616b696e6720616d6f756e7420657863656564656400000000006044820152606401610675565b6119dc82828a6120a7565b9850611a45565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4c4f503a20626f746820616d6f756e747320617265206e6f6e2d7a65726f00006044820152606401610675565b5050600087118015611a575750600086115b611abd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4c4f503a2063616e27742073776170203020616d6f756e7400000000000000006044820152606401610675565b60208a0151611ae49073ffffffffffffffffffffffffffffffffffffffff1683878a61347f565b60408a0151611b0b9073ffffffffffffffffffffffffffffffffffffffff1633848961347f565b60408051828152602081018990527fc3b639f02b125bfa160e50739b8c44eb2d1b6908e2b6d5925c6d770f2ca78127910160405180910390a15094989397509295505050505050565b60008181526001602052604081205480611bca576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a20556e6b6e6f776e206f7264657200000000000000000000000000006044820152606401610675565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b600080611c55836040518060400160405280601781526020017f41433a2061726269747261727953746174696343616c6c0000000000000000008152508673ffffffffffffffffffffffffffffffffffffffff1661218f9092919063ffffffff16565b9050808060200190516020811015611c6c57600080fd5b5051949350505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611cc4573d6000803e3d6000fd5b505050506040513d60a0811015611cda57600080fd5b506020015190507f80000000000000000000000000000000000000000000000000000000000000008416158015907f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff861690611dde57633b9aca00611d3e84612c3f565b8873ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d89573d6000803e3d6000fd5b505050506040513d6020811015611d9f57600080fd5b5051611dac90600a6156ed565b611db68489615314565b611dc09190615314565b611dca9190615380565b611dd49190615380565b9350505050610698565b633b9aca008773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e2e573d6000803e3d6000fd5b505050506040513d6020811015611e4457600080fd5b5051611e5190600a6156ed565b611dac85612c3f565b611e646001610c6e565b565b600080610fbb87878787873361164c565b6000838214611ee2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f50483a20696e7075742061727261792073697a65206d69736d617463680000006044820152606401610675565b60005b84811015612036576000611f92858584818110611f0457611f04615520565b9050602002810190611f16919061554f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152601781527f50483a20276f72272073756263616c6c206661696c6564000000000000000000602082015291508a9050898681811061128c5761128c615520565b90508051602014611fff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f50483a20696e76616c69642063616c6c20726573756c740000000000000000006044820152606401610675565b8080602001905181019061201391906156cb565b1561202357600192505050610727565b508061202e816155c4565b915050611ee5565b50600095945050505050565b60008061209789898961205a368b90038b018b615289565b8989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506122b692505050565b9150915097509795505050505050565b60008261071d8584615314565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290528290506106987f7b63e94209420c4f6a2a8ca90b36938c948908697db47a5dc7f8e692ead4991a8285610100015180519060200120866101200151805190602001208761014001518051906020012088610160015180519060200120896101800151805190602001208a6101a00151805190602001208b6101c0015180519060200120604051602001610c1c999897969594939291906156fc565b606073ffffffffffffffffffffffffffffffffffffffff84163b612234576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7460448201527f72616374000000000000000000000000000000000000000000000000000000006064820152608401610675565b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161225c91906157e9565b600060405180830381855afa9150503d8060008114612297576040519150601f19603f3d011682016040523d82523d6000602084013e61229c565b606091505b50915091506122ac82828661351a565b9695505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff8416612336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4c4f503a207a65726f2074617267657420697320666f7262696464656e0000006044820152606401610675565b6000612341896120b4565b6000818152600160208190526040909120549192508114156123bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4c4f503a2072656d61696e696e6720616d6f756e7420697320300000000000006044820152606401610675565b60a08a015173ffffffffffffffffffffffffffffffffffffffff1615806123ff575060a08a015173ffffffffffffffffffffffffffffffffffffffff1633145b612465576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a2070726976617465206f7264657200000000000000000000000000006044820152606401610675565b806125f2576124af8a60600151838b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061329092505050565b612515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4c4f503a20626164207369676e617475726500000000000000000000000000006044820152606401610675565b8960c00151905060148a6101a0015151106125ed576000806125668c6101a0015160148101805191517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0181529091565b91509150612574828261356d565b600084815260016020526040902054156125ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4c4f503a207265656e7472616e637920646574656374656400000000000000006044820152606401610675565b50505b612615565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff015b6101808a015151156126905761262a8a61136d565b612690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4c4f503a207072656469636174652072657475726e65642066616c73650000006044820152606401610675565b865160208801511590151415612702576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4c4f503a206f6e6c79206f6e6520616d6f756e742073686f756c6420626520306044820152606401610675565b60208701516127ca57865181811115612719578188525b6127368b61016001518c60c001518a600001518e60e001516137f2565b60208901528751604089015161274c9190615314565b81896020015161275c9190615314565b11156127c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f4c4f503a2074616b696e6720616d6f756e7420746f6f206869676800000000006044820152606401610675565b506128a7565b60208701516101408b015160e08c015160c08d01516127ec92919084906137f2565b80895282101561281c578188526101608b015160c08c015160e08d015161281692919085906137f2565b60208901525b876020015188604001516128309190615314565b885161283d908390615314565b10156128a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4c4f503a206d616b696e6720616d6f756e7420746f6f206c6f770000000000006044820152606401610675565b505b8651158015906128bb575060008760200151115b612921576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4c4f503a2063616e27742073776170203020616d6f756e7400000000000000006044820152606401610675565b8651600083815260016020818152604092839020939094039081019092558051848152928301829052909133917fb9ed0243fdf00f0545c63a0af8850c090d86bb46682baec4bf3c496814fe4f02910160405180910390a2506020808a015160608b015188516101008d01516040516129f3956129df947f23b872dd000000000000000000000000000000000000000000000000000000009473ffffffffffffffffffffffffffffffffffffffff91821694918e1693909201615805565b604051602081830303815290604052613960565b6014845110612abf57600080612a338660148101805191517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0181529091565b915091508173ffffffffffffffffffffffffffffffffffffffff1663cf21c775338d602001518e604001518c600001518d60200151876040518763ffffffff1660e01b8152600401612a8a96959493929190615862565b600060405180830381600087803b158015612aa457600080fd5b505af1158015612ab8573d6000803e3d6000fd5b5050505050505b604089015160808a0151612b5291907f23b872dd0000000000000000000000000000000000000000000000000000000090339073ffffffffffffffffffffffffffffffffffffffff1615612b17578c60800151612b1d565b8c606001515b73ffffffffffffffffffffffffffffffffffffffff168a602001518e61012001516040516020016129df959493929190615805565b6014896101c001515110612c2857600080612b9c8b6101c0015160148101805191517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec0181529091565b915091508173ffffffffffffffffffffffffffffffffffffffff1663cf21c775338d602001518e604001518c600001518d60200151876040518763ffffffff1660e01b8152600401612bf396959493929190615862565b600060405180830381600087803b158015612c0d57600080fd5b505af1158015612c21573d6000803e3d6000fd5b5050505050505b505083516020850151909150965096945050505050565b600080821215612cab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610675565b5090565b60003073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015612d1557507f000000000000000000000000000000000000000000000000000000000000000046145b15612d3f57507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6000610c37612df0612caf565b836040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b8015613196576000606060e0831415612f89576040517fd505accf000000000000000000000000000000000000000000000000000000006020820181815273ffffffffffffffffffffffffffffffffffffffff881692879187916024018383808284378083019250505093505050506040516020818303038152906040526040518082805190602001908083835b60208310612f1757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612eda565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114612f79576040519150601f19603f3d011682016040523d82523d6000602084013e612f7e565b606091505b5090925090506130b1565b61010083141561304a576040517f8fcbaf0c000000000000000000000000000000000000000000000000000000006020820181815273ffffffffffffffffffffffffffffffffffffffff8816928791879160240183838082843780830192505050935050505060405160208183030381529060405260405180828051906020019080838360208310612f1757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612eda565b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f57726f6e67207065726d6974206c656e67746800000000000000000000000000604482015290519081900360640190fd5b81613193576130f5816040518060400160405280600f81526020017f5065726d6974206661696c65643a200000000000000000000000000000000000815250613a47565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613158578181015183820152602001613140565b50505050905090810190601f1680156131855780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505b505050565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020908152604080832066ffffffffffffff600886901c16808552928190529220549091600160ff85161b918083161561324f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4c4f503a20696e76616c696461746564206f72646572000000000000000000006044820152606401610675565b60009384526020919091526040909220911790555050565b60003681843560601c828261327f876014818b6158af565b939650945091925050509250925092565b600080600061329f8585613fe2565b909250905060008160048111156132b8576132b86158d9565b1480156132f057508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561330057600192505050610698565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b8888604051602401613335929190615908565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009094169390931790925290516133be91906157e9565b600060405180830381855afa9150503d80600081146133f9576040519150601f19603f3d011682016040523d82523d6000602084013e6133fe565b606091505b5091509150818015613411575080516020145b8015613473575080517f1626ba7e000000000000000000000000000000000000000000000000000000009061344f9083016020908101908401615921565b7fffffffff0000000000000000000000000000000000000000000000000000000016145b98975050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052613514908590614052565b50505050565b60608315613529575081610698565b8251156135395782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067591906156b8565b8051156137ee5760006060825160e0141561370b578373ffffffffffffffffffffffffffffffffffffffff1663d505accf60e01b8460405160200180837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040182805190602001908083835b6020831061361757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016135da565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b6020831061369957805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0909201916020918201910161365c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146136fb576040519150601f19603f3d011682016040523d82523d6000602084013e613700565b606091505b5090925090506137aa565b8251610100141561304a578373ffffffffffffffffffffffffffffffffffffffff16638fcbaf0c60e01b8460405160200180837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260040182805190602001908083836020831061361757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016135da565b81613514576130f5816040518060400160405280600f81526020017f5065726d6974206661696c65643a200000000000000000000000000000000000815250613a47565b5050565b600084516000141561386e57838314613867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4c4f503a2077726f6e6720616d6f756e740000000000000000000000000000006044820152606401610675565b5080610727565b60006138e88685604051602001613886929190615963565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828201909152601a82527f4c4f503a20676574416d6f756e742063616c6c206661696c65640000000000006020830152309161218f565b90508051602014613955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4c4f503a20696e76616c696420676574416d6f756e742072657475726e0000006044820152606401610675565b602001519050610727565b60006139c2826040518060400160405280601681526020017f4c4f503a2061737365742e63616c6c206661696c6564000000000000000000008152508573ffffffffffffffffffffffffffffffffffffffff1661415e9092919063ffffffff16565b80519091501561319657805160201480156139e1575060208101516001145b613196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4c4f503a2061737365742e63616c6c2062616420726573756c740000000000006044820152606401610675565b60606004835110613e765760208301517fffffffff0000000000000000000000000000000000000000000000000000000081167f08c379a000000000000000000000000000000000000000000000000000000000148015613aaa57506044845110155b15613cab57602484810151808601820180519192909190613acc908490615351565b613ad69190615351565b86511015613b4557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c69642072657665727420726561736f6e0000000000000000000000604482015290519081900360640190fd5b84816040516020018083805190602001908083835b60208310613b9757805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613b5a565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790527f4572726f72280000000000000000000000000000000000000000000000000000919093019081528451600690910192850191508083835b60208310613c4457805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613c07565b6001836020036101000a038019825116818451168082178552505050505050905001807f2900000000000000000000000000000000000000000000000000000000000000815250600101925050506040516020818303038152906040529350505050610c37565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f4e487b7100000000000000000000000000000000000000000000000000000000148015613cfd575083516024145b15613e7457602484015183613d118261416d565b6040516020018083805190602001908083835b60208310613d6157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613d24565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790527f50616e6963280000000000000000000000000000000000000000000000000000919093019081528451600690910192850191508083835b60208310613e0e57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613dd1565b6001836020036101000a038019825116818451168082178552505050505050905001807f29000000000000000000000000000000000000000000000000000000000000008152506001019250505060405160208183030381529060405292505050610c37565b505b81613e8084614193565b6040516020018083805190602001908083835b60208310613ed057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613e93565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01801990921691161790527f556e6b6e6f776e28000000000000000000000000000000000000000000000000919093019081528451600890910192850191508083835b60208310613f7d57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101613f40565b6001836020036101000a038019825116818451168082178552505050505050905001807f290000000000000000000000000000000000000000000000000000000000000081525060010192505050604051602081830303815290604052905092915050565b6000808251604114156140195760208301516040840151606085015160001a61400d87828585614438565b9450945050505061404b565b825160401415614043576020830151604084015161403886838361454d565b93509350505061404b565b506000905060025b9250929050565b60006140b4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661415e9092919063ffffffff16565b80519091501561319657808060200190518101906140d291906156cb565b613196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610675565b6060610727848460008561459f565b6060610c3782604051602001808281526020019150506040516020818303038152906040525b80516060907f3031323334353637383961626364656600000000000000000000000000000000906000906141c8906002615314565b6141d3906002615351565b67ffffffffffffffff8111156141eb576141eb614767565b6040519080825280601f01601f191660200182016040528015614215576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061424c5761424c615520565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106142af576142af615520565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060005b8451811015614430578260048683815181106142ff576142ff615520565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016901c60f81c6010811061433b5761433b615520565b1a60f81b8261434b836002615314565b614356906002615351565b8151811061436657614366615520565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350828582815181106143a8576143a8615520565b60209101015160f81c600f16601081106143c4576143c4615520565b1a60f81b826143d4836002615314565b6143df906003615351565b815181106143ef576143ef615520565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080614428816155c4565b9150506142e1565b509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561446f57506000905060036106f0565b8460ff16601b1415801561448757508460ff16601c14155b1561449857506000905060046106f0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156144ec573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116614540576000600192509250506106f0565b9660009650945050505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161458360ff86901c601b615351565b905061459187828885614438565b935093505050935093915050565b606082471015614631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610675565b73ffffffffffffffffffffffffffffffffffffffff85163b6146af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610675565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516146d891906157e9565b60006040518083038185875af1925050503d8060008114614715576040519150601f19603f3d011682016040523d82523d6000602084013e61471a565b606091505b509150915061472a82828661351a565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610f9857600080fd5b803561476281614735565b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516101e0810167ffffffffffffffff811182821017156147ba576147ba614767565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561480757614807614767565b604052919050565b600082601f83011261482057600080fd5b813567ffffffffffffffff81111561483a5761483a614767565b61486b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016147c0565b81815284602083860101111561488057600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156148b257600080fd5b8335925060208401356148c481614735565b9150604084013567ffffffffffffffff8111156148e057600080fd5b6148ec8682870161480f565b9150509250925092565b60006101e0828403121561490957600080fd5b614911614796565b90508135815261492360208301614757565b602082015261493460408301614757565b604082015261494560608301614757565b606082015261495660808301614757565b608082015261496760a08301614757565b60a082015260c082013560c082015260e082013560e08201526101008083013567ffffffffffffffff8082111561499d57600080fd5b6149a98683870161480f565b838501526101209250828501359150808211156149c557600080fd5b6149d18683870161480f565b838501526101409250828501359150808211156149ed57600080fd5b6149f98683870161480f565b83850152610160925082850135915080821115614a1557600080fd5b614a218683870161480f565b83850152610180925082850135915080821115614a3d57600080fd5b614a498683870161480f565b838501526101a0925082850135915080821115614a6557600080fd5b614a718683870161480f565b838501526101c0925082850135915080821115614a8d57600080fd5b50614a9a8582860161480f565b82840152505092915050565b60008083601f840112614ab857600080fd5b50813567ffffffffffffffff811115614ad057600080fd5b60208301915083602082850101111561404b57600080fd5b600060608284031215614afa57600080fd5b50919050565b60008060008060a08587031215614b1657600080fd5b843567ffffffffffffffff80821115614b2e57600080fd5b614b3a888389016148f6565b95506020870135915080821115614b5057600080fd5b50614b5d87828801614aa6565b9094509250614b7190508660408701614ae8565b905092959194509250565b600080600060608486031215614b9157600080fd5b505081359360208301359350604090920135919050565b600080600080600060a08688031215614bc057600080fd5b8535614bcb81614735565b94506020860135614bdb81614735565b94979496505050506040830135926060810135926080909101359150565b600060e08284031215614c0b57600080fd5b60405160e0810181811067ffffffffffffffff82111715614c2e57614c2e614767565b604052823581529050806020830135614c4681614735565b60208201526040830135614c5981614735565b60408201526060830135614c6c81614735565b60608201526080830135614c7f81614735565b8060808301525060a083013560a082015260c083013560c08201525092915050565b600060e08284031215614cb357600080fd5b6106988383614bf9565b600080600080600080600080610180898b031215614cda57600080fd5b614ce48a8a614bf9565b975060e089013567ffffffffffffffff80821115614d0157600080fd5b614d0d8c838d01614aa6565b90995097506101008b013596506101208b013595506101408b01359150614d3382614735565b9093506101608a01359080821115614d4a57600080fd5b50614d578b828c01614aa6565b999c989b5096995094979396929594505050565b60008060408385031215614d7e57600080fd5b8235614d8981614735565b946020939093013593505050565b600060208284031215614da957600080fd5b5035919050565b600060208284031215614dc257600080fd5b813561069881614735565b600060208284031215614ddf57600080fd5b813560ff8116811461069857600080fd5b60008083601f840112614e0257600080fd5b50813567ffffffffffffffff811115614e1a57600080fd5b6020830191508360208260051b850101111561404b57600080fd5b60008060008060408587031215614e4b57600080fd5b843567ffffffffffffffff80821115614e6357600080fd5b614e6f88838901614df0565b90965094506020870135915080821115614e8857600080fd5b50614e9587828801614df0565b95989497509550505050565b600080600080600060c08688031215614eb957600080fd5b853567ffffffffffffffff80821115614ed157600080fd5b614edd89838a016148f6565b96506020880135915080821115614ef357600080fd5b50614f0088828901614aa6565b9095509350614f1490508760408801614ae8565b915060a0860135614f2481614735565b809150509295509295909350565b60006020808385031215614f4557600080fd5b823567ffffffffffffffff80821115614f5d57600080fd5b818501915085601f830112614f7157600080fd5b813581811115614f8357614f83614767565b8060051b9150614f948483016147c0565b8181529183018401918481019088841115614fae57600080fd5b938501935b8385101561347357843582529385019390850190614fb3565b6020808252825182820181905260009190848201906040850190845b8181101561500457835183529284019291840191600101614fe8565b50909695505050505050565b60006020828403121561502257600080fd5b813567ffffffffffffffff81111561503957600080fd5b610727848285016148f6565b600080600080600080600060e0888a03121561506057600080fd5b873567ffffffffffffffff8082111561507857600080fd5b6150848b838c016148f6565b985060208a013591508082111561509a57600080fd5b6150a68b838c01614aa6565b90985096508691506150bb8b60408c01614ae8565b955060a08a013591506150cd82614735565b90935060c089013590808211156150e357600080fd5b506150f08a828b01614aa6565b989b979a50959850939692959293505050565b600080600080600080610160878903121561511d57600080fd5b6151278888614bf9565b955060e087013567ffffffffffffffff81111561514357600080fd5b61514f89828a01614aa6565b9096509450506101008701359250610120870135915061014087013561517481614735565b809150509295509295509295565b6000806040838503121561519557600080fd5b82356151a081614735565b9150602083013567ffffffffffffffff8111156151bc57600080fd5b6151c88582860161480f565b9150509250929050565b6000806000606084860312156151e757600080fd5b83356151f281614735565b95602085013595506040909401359392505050565b6000806000806000610140868803121561522057600080fd5b61522a8787614bf9565b945060e086013567ffffffffffffffff81111561524657600080fd5b61525288828901614aa6565b96999098509596610100810135966101209091013595509350505050565b60006020828403121561528257600080fd5b5051919050565b60006060828403121561529b57600080fd5b6040516060810181811067ffffffffffffffff821117156152be576152be614767565b80604052508235815260208301356020820152604083013560408201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561534c5761534c6152e5565b500290565b60008219821115615364576153646152e5565b500190565b60008282101561537b5761537b6152e5565b500390565b6000826153b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600181815b8085111561541457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156153fa576153fa6152e5565b8085161561540757918102915b93841c93908002906153c0565b509250929050565b60008261542b57506001610c37565b8161543857506000610c37565b816001811461544e576002811461545857615474565b6001915050610c37565b60ff841115615469576154696152e5565b50506001821b610c37565b5060208310610133831016604e8410600b8410161715615497575081810a610c37565b6154a183836153bb565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156154d3576154d36152e5565b029392505050565b6000610698838361541c565b60007f8000000000000000000000000000000000000000000000000000000000000000821415615519576155196152e5565b5060000390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261558457600080fd5b83018035915067ffffffffffffffff82111561559f57600080fd5b60200191503681900382131561404b57600080fd5b8183823760009101908152919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156155f6576155f66152e5565b5060010190565b60005b83811015615618578181015183820152602001615600565b838111156135145750506000910152565b7f43414c4c5f524553554c54535f0000000000000000000000000000000000000081526000825161566181600d8501602087016155fd565b91909101600d0192915050565b600081518084526156868160208601602086016155fd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610698602083018461566e565b6000602082840312156156dd57600080fd5b8151801515811461069857600080fd5b600061069860ff84168361541c565b6000610200820190508a82528951602083015260208a015173ffffffffffffffffffffffffffffffffffffffff80821660408501528060408d01511660608501528060608d0151166080850152505060808a015161577260a084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060a08a015173ffffffffffffffffffffffffffffffffffffffff811660c08401525060c08a015160e083015260e08a015161010083015288610120830152876101408301528661016083015285610180830152846101a0830152836101c0830152826101e08301529a9950505050505050505050565b600082516157fb8184602087016155fd565b9190910192915050565b7fffffffff0000000000000000000000000000000000000000000000000000000086168152846004820152836024820152826044820152600082516158518160648501602087016155fd565b919091016064019695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff8089168352808816602084015280871660408401525084606083015283608083015260c060a083015261347360c083018461566e565b600080858511156158bf57600080fd5b838611156158cc57600080fd5b5050820193919092039150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b828152604060208201526000610727604083018461566e565b60006020828403121561593357600080fd5b81517fffffffff000000000000000000000000000000000000000000000000000000008116811461069857600080fd5b600083516159758184602088016155fd565b919091019182525060200191905056fea26469706673582212200047c8b6224a27ed4c26de9279d2e9968d6089f758d23fbc2235d8cebc3ffe6564736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "and(address[],bytes[])": {
        "returns": {
          "_0": "Result True if calls to all targets returned True. Otherwise, false"
        }
      },
      "arbitraryStaticCall(address,bytes)": {
        "returns": {
          "_0": "Result Bytes transmuted to uint256"
        }
      },
      "doublePrice(address,address,uint256,int256,uint256)": {
        "returns": {
          "_0": "Result Token A relative price times amount"
        }
      },
      "eq(uint256,address,bytes)": {
        "params": {
          "value": "Value to test"
        },
        "returns": {
          "_0": "Result True if call to target returns the same value as `value`. Otherwise, false"
        }
      },
      "fillOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256))": {
        "params": {
          "order": "Order quote to fill",
          "orderAmounts": "Amounts to fill",
          "signature": "Signature to confirm quote ownership"
        }
      },
      "fillOrderRFQ((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)": {
        "params": {
          "makingAmount": "Making amount",
          "order": "Order quote to fill",
          "signature": "Signature to confirm quote ownership",
          "takingAmount": "Taking amount"
        }
      },
      "fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address)": {
        "params": {
          "makingAmount": "Making amount",
          "order": "Order quote to fill",
          "signature": "Signature to confirm quote ownership",
          "takingAmount": "Taking amount",
          "target": "Address that will receive swap funds"
        }
      },
      "fillOrderRFQToWithPermit((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address,bytes)": {
        "details": "See tests for examples",
        "params": {
          "makingAmount": "Making amount",
          "order": "Order quote to fill",
          "permit": "Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.",
          "signature": "Signature to confirm quote ownership",
          "takingAmount": "Taking amount",
          "target": "Address that will receive swap funds"
        }
      },
      "fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address)": {
        "params": {
          "order": "Order quote to fill",
          "orderAmounts": "Amounts to fill",
          "signature": "Signature to confirm quote ownership",
          "target": "Address that will receive swap funds"
        }
      },
      "fillOrderToWithExtraInteraction((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address,bytes)": {
        "params": {
          "extraInteraction": "Optional interaction. If present, is triggered between asset transfers",
          "order": "Order quote to fill",
          "orderAmounts": "Amounts to fill",
          "signature": "Signature to confirm quote ownership",
          "target": "Address that will receive swap funds"
        }
      },
      "fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address,bytes)": {
        "details": "See tests for examples",
        "params": {
          "order": "Order quote to fill",
          "orderAmounts": "Amounts to fill",
          "permit": "Should consist of abiencoded token address and encoded `IERC20Permit.permit` call.",
          "signature": "Signature to confirm quote ownership",
          "target": "Address that will receive swap funds"
        }
      },
      "getMakerAmount(uint256,uint256,uint256)": {
        "returns": {
          "_0": "Result Floored maker amount"
        }
      },
      "getTakerAmount(uint256,uint256,uint256)": {
        "returns": {
          "_0": "Result Ceiled taker amount"
        }
      },
      "gt(uint256,address,bytes)": {
        "params": {
          "value": "Value to test"
        },
        "returns": {
          "_0": "Result True if call to target returns value which is bigger than `value`. Otherwise, false"
        }
      },
      "invalidatorForOrderRFQ(address,uint256)": {
        "returns": {
          "_0": "Result Each bit represents whether corresponding was already invalidated"
        }
      },
      "lt(uint256,address,bytes)": {
        "params": {
          "value": "Value to test"
        },
        "returns": {
          "_0": "Result True if call to target returns value which is lower than `value`. Otherwise, false"
        }
      },
      "nonceEquals(address,uint256)": {
        "returns": {
          "_0": "Result True if `makerAddress` has specified nonce. Otherwise, false"
        }
      },
      "or(address[],bytes[])": {
        "returns": {
          "_0": "Result True if call to any target returned True. Otherwise, false"
        }
      },
      "remainingRaw(bytes32)": {
        "returns": {
          "_0": "Result Unfilled amount of order plus one if order exists. Otherwise 0"
        }
      },
      "simulateCalls(address[],bytes[])": {
        "params": {
          "data": "Array of data that will be passed to each call",
          "targets": "Array of addresses that will be called"
        }
      },
      "singlePrice(address,uint256,uint256)": {
        "params": {
          "inverseAndSpread": "concatenated inverse flag and spread. Lowest 254 bits specify spread amount. Spread is scaled by 1e9, i.e. 101% = 1.01e9, 99% = 0.99e9. Highest bit is set when oracle price should be inverted, e.g. for DAI-ETH oracle, inverse=false means that we request DAI price in ETH and inverse=true means that we request ETH price in DAI"
        },
        "returns": {
          "_0": "Amount * spread * oracle price"
        }
      },
      "timestampBelow(uint256)": {
        "returns": {
          "_0": "Result True if current block timestamp is lower than `time`. Otherwise, false"
        }
      }
    },
    "title": "Ubeswap Limit Order Protocol v2",
    "version": 1
  },
  "userdoc": {
    "events": {
      "OrderCanceled(address,bytes32,uint256)": {
        "notice": "Emitted when order gets cancelled"
      },
      "OrderFilled(address,bytes32,uint256)": {
        "notice": "Emitted every time order gets filled, including partial fills"
      },
      "OrderFilledRFQ(bytes32,uint256)": {
        "notice": "Emitted when RFQ gets filled"
      }
    },
    "kind": "user",
    "methods": {
      "advanceNonce(uint8)": {
        "notice": "Advances nonce by specified amount"
      },
      "and(address[],bytes[])": {
        "notice": "Calls every target with corresponding data"
      },
      "arbitraryStaticCall(address,bytes)": {
        "notice": "Performs an arbitrary call to target with data"
      },
      "cancelOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes))": {
        "notice": "Cancels order by setting remaining amount to zero"
      },
      "cancelOrderRFQ(uint256)": {
        "notice": "Cancels order's quote"
      },
      "checkPredicate((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes))": {
        "notice": "Checks order predicate"
      },
      "doublePrice(address,address,uint256,int256,uint256)": {
        "notice": "Calculates price of token A relative to token B. Note that order is important"
      },
      "eq(uint256,address,bytes)": {
        "notice": "Calls target with specified data and tests if it's equal to the value"
      },
      "fillOrder((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256))": {
        "notice": "Fills an order. If one doesn't exist (first fill) it will be created using order.makerAssetData"
      },
      "fillOrderRFQ((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256)": {
        "notice": "Fills order's quote, fully or partially (whichever is possible)"
      },
      "fillOrderRFQTo((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address)": {
        "notice": "Same as `fillOrderRFQ` but allows to specify funds destination instead of `msg.sender`"
      },
      "fillOrderRFQToWithPermit((uint256,address,address,address,address,uint256,uint256),bytes,uint256,uint256,address,bytes)": {
        "notice": "Fills Same as `fillOrderRFQ` but calls permit first, allowing to approve token spending and make a swap in one transaction. Also allows to specify funds destination instead of `msg.sender`"
      },
      "fillOrderTo((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address)": {
        "notice": "Same as `fillOrder` but allows to specify funds destination instead of `msg.sender`"
      },
      "fillOrderToWithExtraInteraction((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address,bytes)": {
        "notice": "Same as `fillOrderTo` but allows for additional interaction between asset transfers"
      },
      "fillOrderToWithPermit((uint256,address,address,address,address,address,uint256,uint256,bytes,bytes,bytes,bytes,bytes,bytes,bytes),bytes,(uint256,uint256,uint256),address,bytes)": {
        "notice": "Same as `fillOrder` but calls permit first, allowing to approve token spending and make a swap in one transaction. Also allows to specify funds destination instead of `msg.sender`"
      },
      "getMakerAmount(uint256,uint256,uint256)": {
        "notice": "Calculates maker amount"
      },
      "getTakerAmount(uint256,uint256,uint256)": {
        "notice": "Calculates taker amount"
      },
      "gt(uint256,address,bytes)": {
        "notice": "Calls target with specified data and tests if it's bigger than value"
      },
      "increaseNonce()": {
        "notice": "Advances nonce by one"
      },
      "invalidatorForOrderRFQ(address,uint256)": {
        "notice": "Returns bitmask for double-spend invalidators based on lowest byte of order.info and filled quotes"
      },
      "lt(uint256,address,bytes)": {
        "notice": "Calls target with specified data and tests if it's lower than value"
      },
      "nonceEquals(address,uint256)": {
        "notice": "Checks if `makerAddress` has specified `makerNonce`"
      },
      "or(address[],bytes[])": {
        "notice": "Calls every target with corresponding data"
      },
      "remaining(bytes32)": {
        "notice": "Returns unfilled amount for order. Throws if order does not exist"
      },
      "remainingRaw(bytes32)": {
        "notice": "Returns unfilled amount for order"
      },
      "remainingsRaw(bytes32[])": {
        "notice": "Same as `remainingRaw` but for multiple orders"
      },
      "simulateCalls(address[],bytes[])": {
        "notice": "Calls every target with corresponding data. Then reverts with CALL_RESULTS_0101011 where zeroes and ones denote failure or success of the corresponding call"
      },
      "singlePrice(address,uint256,uint256)": {
        "notice": "Calculates price of token relative to oracle unit (ETH or USD)"
      },
      "timestampBelow(uint256)": {
        "notice": "Checks passed time against block timestamp"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6082,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "nonce",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3830,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_remaining",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 4955,
        "contract": "contracts/LimitOrderProtocol.sol:LimitOrderProtocol",
        "label": "_invalidator",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}